/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyectop2_miniaccess_miaelvir_alereyes;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.Buffer;
import javax.swing.text.Style;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.Document;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author aleja
 */
public class PaginaInicio extends javax.swing.JFrame {

    ArrayList<Usuario> usuarios = new ArrayList();
    //este es, tiene que ser 

    /**
     * Creates new form PaginaInicio
     */
    public PaginaInicio() {
        initComponents();
        
        this.setLocationRelativeTo(null);

        Usuario mia = new Usuario("papoy", "pato");
        Usuario ale = new Usuario("papita", "salsa");
        mia.getPermisos().add("Gestion de Nuevos Usuarios");
        mia.getPermisos().add("Create");
        mia.getPermisos().add("Select");
        mia.getPermisos().add("Insert");
        mia.getPermisos().add("Delete");
        mia.getPermisos().add("Drop");
        ale.getPermisos().add("Gestion de Nuevos Usuarios");
        ale.getPermisos().add("Create");
        ale.getPermisos().add("Select");
        ale.getPermisos().add("Insert");
        ale.getPermisos().add("Delete");
        ale.getPermisos().add("Drop");
        usuarios.add(mia);
        usuarios.add(ale);
        doc = tp_sql.getStyledDocument();
        estilo = tp_sql.addStyle("estilo", null);
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jd_crearusuario = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tf_crearnombreusuario = new javax.swing.JTextField();
        pf_contracrearusuario = new javax.swing.JPasswordField();
        bt_crear = new javax.swing.JButton();
        jd_error = new javax.swing.JDialog();
        jl_error = new javax.swing.JLabel();
        bt_ok = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jd_inicio = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        bt_cuentapginicio = new javax.swing.JButton();
        bt_opcionespginicio = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        bt_iniciopginicio = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        bt_nuevopginicio = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jl_abrir = new javax.swing.JLabel();
        bt_abrirpginicio = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jl_bienvenido = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jt_ArbolInicio = new javax.swing.JTree();
        jPanel8 = new javax.swing.JPanel();
        bt_nuevoBase = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jd_espaciodetrabajo = new javax.swing.JDialog();
        jPanel9 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        bt_newdatabase = new javax.swing.JButton();
        bt_elimbase = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtree_baseddatos = new javax.swing.JTree();
        jPanel11 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel12 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        bt_clear = new javax.swing.JButton();
        bt_send = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tp_sql = new javax.swing.JTextPane();
        comboSql = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla_esptrabajo = new javax.swing.JTable();
        jPanel18 = new javax.swing.JPanel();
        jp_diagrama = new javax.swing.JPanel();
        jToolBar3 = new javax.swing.JToolBar();
        bt_dibBase = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        popup_tablasenarbol = new javax.swing.JPopupMenu();
        jmi_eliminarbase = new javax.swing.JMenuItem();
        jd_cuenta = new javax.swing.JDialog();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jl_usuarioCuenta = new javax.swing.JLabel();
        jl_contrase√±aCuenta = new javax.swing.JLabel();
        jd_baseUsuarios = new javax.swing.JDialog();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        tf_usuarioBase = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        bt_crearuserBase = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        cb_gestionUsuarios = new javax.swing.JCheckBox();
        cb_create = new javax.swing.JCheckBox();
        cb_select = new javax.swing.JCheckBox();
        cb_insert = new javax.swing.JCheckBox();
        cb_drop = new javax.swing.JCheckBox();
        cb_delete1 = new javax.swing.JCheckBox();
        pf_contraUser = new javax.swing.JPasswordField();
        popup_opcionesBases = new javax.swing.JPopupMenu();
        jmi_AgregarUsuario = new javax.swing.JMenuItem();
        jmi_cambiarUsuario = new javax.swing.JMenuItem();
        jmi_AgregarTabla = new javax.swing.JMenuItem();
        jmi_eliminarBase = new javax.swing.JMenuItem();
        jmi_diagramarBase = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pf_contra = new javax.swing.JPasswordField();
        tf_usuarioo = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        bt_ingresar = new javax.swing.JButton();
        bt_notengousuario = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        jPanel3.setBackground(new java.awt.Color(249, 187, 218));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel5.setFont(new java.awt.Font("Bell MT", 0, 30)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Crear Usuario");

        jLabel6.setFont(new java.awt.Font("Bell MT", 0, 20)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Usuario");

        jLabel7.setFont(new java.awt.Font("Bell MT", 0, 20)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Contrase√±a");

        tf_crearnombreusuario.setBackground(new java.awt.Color(0, 0, 0));
        tf_crearnombreusuario.setForeground(new java.awt.Color(255, 255, 255));

        pf_contracrearusuario.setBackground(new java.awt.Color(0, 0, 0));
        pf_contracrearusuario.setForeground(new java.awt.Color(255, 255, 255));

        bt_crear.setBackground(new java.awt.Color(255, 153, 204));
        bt_crear.setFont(new java.awt.Font("Bell MT", 1, 16)); // NOI18N
        bt_crear.setForeground(new java.awt.Color(0, 0, 0));
        bt_crear.setText("Crear");
        bt_crear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_crearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tf_crearnombreusuario)
                            .addComponent(pf_contracrearusuario, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap(109, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(73, 73, 73))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(bt_crear, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)))))
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel5)
                .addGap(69, 69, 69)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_crearnombreusuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(36, 36, 36)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(pf_contracrearusuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(bt_crear)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jd_crearusuarioLayout = new javax.swing.GroupLayout(jd_crearusuario.getContentPane());
        jd_crearusuario.getContentPane().setLayout(jd_crearusuarioLayout);
        jd_crearusuarioLayout.setHorizontalGroup(
            jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jd_crearusuarioLayout.setVerticalGroup(
            jd_crearusuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jd_error.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jl_error.setFont(new java.awt.Font("Maiandra GD", 1, 12)); // NOI18N
        jl_error.setForeground(new java.awt.Color(0, 0, 0));
        jl_error.setText("*texto aqui*\n");
        jd_error.getContentPane().add(jl_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 290, 70));

        bt_ok.setBackground(new java.awt.Color(253, 220, 220));
        bt_ok.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bt_ok.setForeground(new java.awt.Color(0, 0, 0));
        bt_ok.setText("OK ");
        bt_ok.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_okMouseClicked(evt);
            }
        });
        jd_error.getContentPane().add(bt_ok, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 130, 30));

        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/ErrorMensaje.png"))); // NOI18N
        jLabel8.setText("si");
        jd_error.getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 360, 170));

        jd_inicio.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBackground(new java.awt.Color(255, 204, 204));
        jPanel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jSeparator1.setForeground(new java.awt.Color(255, 102, 102));
        jSeparator1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jPanel6.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 451, 119, 13));

        bt_cuentapginicio.setBackground(new java.awt.Color(255, 204, 204));
        bt_cuentapginicio.setFont(new java.awt.Font("Bell MT", 3, 15)); // NOI18N
        bt_cuentapginicio.setForeground(new java.awt.Color(0, 0, 0));
        bt_cuentapginicio.setText("Cuenta");
        bt_cuentapginicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_cuentapginicioMouseClicked(evt);
            }
        });
        bt_cuentapginicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_cuentapginicioActionPerformed(evt);
            }
        });
        jPanel6.add(bt_cuentapginicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 470, 146, 23));

        bt_opcionespginicio.setBackground(new java.awt.Color(255, 204, 204));
        bt_opcionespginicio.setFont(new java.awt.Font("Bell MT", 3, 14)); // NOI18N
        bt_opcionespginicio.setForeground(new java.awt.Color(0, 0, 0));
        bt_opcionespginicio.setText("Opciones");
        jPanel6.add(bt_opcionespginicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 499, 146, 21));

        jLabel11.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 102, 102));
        jLabel11.setText(" Inicio");
        jPanel6.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 50, 20));

        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/rositamaspeque√±o.png"))); // NOI18N
        jPanel6.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 60, 50));

        bt_iniciopginicio.setBackground(new java.awt.Color(255, 204, 204));
        bt_iniciopginicio.setAlignmentX(2.0F);
        bt_iniciopginicio.setAlignmentY(2.0F);
        bt_iniciopginicio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bt_iniciopginicio.setIconTextGap(5);
        bt_iniciopginicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_iniciopginicioActionPerformed(evt);
            }
        });
        jPanel6.add(bt_iniciopginicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 152, 96));

        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/folder peque√±o inicio.png"))); // NOI18N
        jLabel13.setText("jLabel13");
        jPanel6.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 50, 50));

        jLabel12.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 102, 102));
        jLabel12.setText("Nuevo");
        jPanel6.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, 60, -1));

        bt_nuevopginicio.setBackground(new java.awt.Color(255, 204, 204));
        bt_nuevopginicio.setAlignmentX(2.0F);
        bt_nuevopginicio.setAlignmentY(2.0F);
        bt_nuevopginicio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bt_nuevopginicio.setIconTextGap(5);
        bt_nuevopginicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_nuevopginicioMouseClicked(evt);
            }
        });
        bt_nuevopginicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_nuevopginicioActionPerformed(evt);
            }
        });
        jPanel6.add(bt_nuevopginicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 153, 152, 96));

        jLabel14.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 102, 102));
        jLabel14.setText(" Abrir");
        jPanel6.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 320, 50, -1));

        jl_abrir.setForeground(new java.awt.Color(0, 0, 0));
        jl_abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/carpeta peque√±a.png"))); // NOI18N
        jl_abrir.setText("jLabel15");
        jl_abrir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jl_abrirMouseClicked(evt);
            }
        });
        jPanel6.add(jl_abrir, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, 50, 50));

        bt_abrirpginicio.setBackground(new java.awt.Color(255, 204, 204));
        bt_abrirpginicio.setAlignmentX(2.0F);
        bt_abrirpginicio.setAlignmentY(2.0F);
        bt_abrirpginicio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bt_abrirpginicio.setIconTextGap(5);
        bt_abrirpginicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_abrirpginicioMouseClicked(evt);
            }
        });
        jPanel6.add(bt_abrirpginicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 257, 152, 96));

        jPanel5.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 530));

        jLabel9.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Bienvenid@");
        jPanel5.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, -1, -1));

        jl_bienvenido.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        jl_bienvenido.setForeground(new java.awt.Color(255, 153, 153));
        jl_bienvenido.setText("Ale/Mia");
        jPanel5.add(jl_bienvenido, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, 179, -1));

        jTabbedPane1.setBackground(new java.awt.Color(255, 204, 204));
        jTabbedPane1.setForeground(new java.awt.Color(0, 0, 0));
        jTabbedPane1.setFont(new java.awt.Font("Bell MT", 3, 14)); // NOI18N

        jPanel7.setBackground(new java.awt.Color(252, 223, 223));
        jPanel7.setForeground(new java.awt.Color(255, 233, 233));

        jt_ArbolInicio.setBackground(new java.awt.Color(255, 255, 255));
        jt_ArbolInicio.setForeground(new java.awt.Color(204, 204, 255));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Archivos");
        jt_ArbolInicio.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(jt_ArbolInicio);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Recientes", jPanel7);

        jPanel8.setBackground(new java.awt.Color(253, 219, 219));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 670, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 245, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Anclados", jPanel8);

        jPanel5.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 230, 670, 280));

        bt_nuevoBase.setBackground(new java.awt.Color(255, 255, 255));
        bt_nuevoBase.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/folder rosa.png"))); // NOI18N
        bt_nuevoBase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_nuevoBaseMouseClicked(evt);
            }
        });
        bt_nuevoBase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_nuevoBaseActionPerformed(evt);
            }
        });
        jPanel5.add(bt_nuevoBase, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, 120, 110));

        jLabel16.setText("jLabel16");
        jPanel5.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(223, 86, 90, 100));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setText("Abrir espacio de trabajo");
        jPanel5.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 120, -1));

        jd_inicio.getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 530));

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setForeground(new java.awt.Color(0, 0, 0));

        jMenu1.setText("Opciones");
        jMenu1.setFont(new java.awt.Font("Bell MT", 2, 14)); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Entrar a espacio de trabajo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Regresar a Login");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ayuda");
        jMenu2.setFont(new java.awt.Font("Bell MT", 2, 14)); // NOI18N
        jMenuBar1.add(jMenu2);

        jd_inicio.setJMenuBar(jMenuBar1);

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jToolBar1.setBackground(new java.awt.Color(255, 204, 204));
        jToolBar1.setRollover(true);

        bt_newdatabase.setBackground(new java.awt.Color(0, 0, 0));
        bt_newdatabase.setFont(new java.awt.Font("Calibri Light", 1, 12)); // NOI18N
        bt_newdatabase.setText("+ New Database");
        bt_newdatabase.setFocusable(false);
        bt_newdatabase.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bt_newdatabase.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bt_newdatabase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_newdatabaseMouseClicked(evt);
            }
        });
        jToolBar1.add(bt_newdatabase);

        bt_elimbase.setBackground(new java.awt.Color(0, 0, 0));
        bt_elimbase.setFont(new java.awt.Font("Calibri Light", 1, 12)); // NOI18N
        bt_elimbase.setText("- Delete Database");
        bt_elimbase.setFocusable(false);
        bt_elimbase.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bt_elimbase.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bt_elimbase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_elimbaseMouseClicked(evt);
            }
        });
        jToolBar1.add(bt_elimbase);

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Calibri Light", 1, 12)); // NOI18N
        jButton1.setText("Cambiar de Usuario");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jToolBar1.add(jButton1);

        jTabbedPane2.setBackground(new java.awt.Color(255, 153, 153));
        jTabbedPane2.setForeground(new java.awt.Color(0, 0, 0));
        jTabbedPane2.setFont(new java.awt.Font("Bell MT", 3, 14)); // NOI18N

        jPanel10.setBackground(new java.awt.Color(255, 204, 204));

        jtree_baseddatos.setBackground(new java.awt.Color(255, 255, 255));
        jtree_baseddatos.setForeground(new java.awt.Color(0, 0, 0));
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Bases de Datos");
        jtree_baseddatos.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jtree_baseddatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtree_baseddatosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtree_baseddatos);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Databases", jPanel10);

        jPanel11.setBackground(new java.awt.Color(255, 204, 204));

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));
        jPanel19.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(252, 109, 109));
        jLabel25.setText("CREATE TABLE nombre_tabla(campo1, campo-n)");
        jPanel19.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel26.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(252, 109, 109));
        jLabel26.setText("DROP DATABASE nombre_base_datos");
        jPanel19.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        jLabel27.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(252, 109, 109));
        jLabel27.setText("WHERE x.campo1=y.campo1");
        jPanel19.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        jLabel28.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(252, 109, 109));
        jLabel28.setText(" FROM nombre_tabla (WHERE campox= algo)");
        jPanel19.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jLabel29.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(252, 109, 109));
        jLabel29.setText("SELECT campo1, campo2.. Campo-n");
        jPanel19.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        jLabel30.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(252, 109, 109));
        jLabel30.setText("SELECT x.campo1, x.campo2, y.campo5 ");
        jPanel19.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        jLabel31.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(252, 109, 109));
        jLabel31.setText("FROM tabla1 x, tabla2 y ");
        jPanel19.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jLabel32.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(252, 109, 109));
        jLabel32.setText("INSERT INTO nombre_tabla VALUES(valor1, valorn)");
        jPanel19.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jLabel33.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(252, 109, 109));
        jLabel33.setText("WHERE campoy=algo");
        jPanel19.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, -1, -1));

        jLabel34.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(252, 109, 109));
        jLabel34.setText("CREATE DATABASE nombre_base_datos");
        jPanel19.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        jLabel35.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(252, 109, 109));
        jLabel35.setText("DELETE FROM nombre_tabla WHERE campox=algo");
        jPanel19.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        jLabel36.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(252, 109, 109));
        jLabel36.setText("UPDATE nombre_tabla SET Campox=algo");
        jPanel19.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));

        jLabel37.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(252, 109, 109));
        jLabel37.setText("TRUNCATE TABLE Nombre_Tabla");
        jPanel19.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, -1, -1));

        jLabel38.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(252, 109, 109));
        jLabel38.setText("DROP TABLE nombre_tabla");
        jPanel19.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, -1));

        jLabel39.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(252, 109, 109));
        jLabel39.setText("GRANT DATABASE nombre_base_da TO usuario");
        jPanel19.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, -1));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Comandos", jPanel11);

        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jToolBar2.setRollover(true);

        bt_clear.setText("clear");
        bt_clear.setFocusable(false);
        bt_clear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bt_clear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bt_clear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_clearMouseClicked(evt);
            }
        });
        jToolBar2.add(bt_clear);

        bt_send.setText("send");
        bt_send.setFocusable(false);
        bt_send.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bt_send.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bt_send.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_sendMouseClicked(evt);
            }
        });
        bt_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_sendActionPerformed(evt);
            }
        });
        jToolBar2.add(bt_send);

        jButton2.setText("script");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jToolBar2.add(jButton2);

        jPanel12.add(jToolBar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 144, 25));

        tp_sql.setBackground(new java.awt.Color(255, 255, 255));
        tp_sql.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tp_sqlInputMethodTextChanged(evt);
            }
        });
        tp_sql.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tp_sqlKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(tp_sql);

        jPanel12.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 31, 683, 100));

        jPanel12.add(comboSql, new org.netbeans.lib.awtextra.AbsoluteConstraints(269, 6, 420, 19));

        tabla_esptrabajo.setBackground(new java.awt.Color(204, 204, 204));
        tabla_esptrabajo.setForeground(new java.awt.Color(0, 0, 0));
        tabla_esptrabajo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tabla_esptrabajo);

        jPanel12.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 680, 340));

        jTabbedPane3.addTab("SQL", jPanel12);

        jPanel18.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jp_diagrama.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jp_diagramaLayout = new javax.swing.GroupLayout(jp_diagrama);
        jp_diagrama.setLayout(jp_diagramaLayout);
        jp_diagramaLayout.setHorizontalGroup(
            jp_diagramaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 690, Short.MAX_VALUE)
        );
        jp_diagramaLayout.setVerticalGroup(
            jp_diagramaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 524, Short.MAX_VALUE)
        );

        jPanel18.add(jp_diagrama, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 43, 690, -1));

        jToolBar3.setBackground(new java.awt.Color(255, 204, 204));
        jToolBar3.setRollover(true);

        bt_dibBase.setBackground(new java.awt.Color(255, 153, 153));
        bt_dibBase.setForeground(new java.awt.Color(0, 0, 0));
        bt_dibBase.setText("Dibujar Base de Datos");
        bt_dibBase.setFocusable(false);
        bt_dibBase.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bt_dibBase.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar3.add(bt_dibBase);

        jButton5.setBackground(new java.awt.Color(255, 153, 153));
        jButton5.setForeground(new java.awt.Color(0, 0, 0));
        jButton5.setText("Pasar al arbol");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar3.add(jButton5);

        jButton6.setBackground(new java.awt.Color(255, 153, 153));
        jButton6.setForeground(new java.awt.Color(0, 0, 0));
        jButton6.setText("Clear");
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar3.add(jButton6);

        jPanel18.add(jToolBar3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 387, 25));

        jTabbedPane3.addTab("Diagramacion", jPanel18);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane2)
                    .addComponent(jTabbedPane3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu3.setText("File");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem3.setBackground(new java.awt.Color(255, 153, 153));
        jMenuItem3.setText("MiaElvir");
        jMenu3.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem4.setText("AleReyes");
        jMenu3.add(jMenuItem4);

        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");

        jMenuItem5.setText("jMenuItem5");
        jMenu4.add(jMenuItem5);

        jMenuBar2.add(jMenu4);

        jd_espaciodetrabajo.setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout jd_espaciodetrabajoLayout = new javax.swing.GroupLayout(jd_espaciodetrabajo.getContentPane());
        jd_espaciodetrabajo.getContentPane().setLayout(jd_espaciodetrabajoLayout);
        jd_espaciodetrabajoLayout.setHorizontalGroup(
            jd_espaciodetrabajoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jd_espaciodetrabajoLayout.setVerticalGroup(
            jd_espaciodetrabajoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jmi_eliminarbase.setText("Eliminar ");
        jmi_eliminarbase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_eliminarbaseActionPerformed(evt);
            }
        });
        popup_tablasenarbol.add(jmi_eliminarbase);

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));
        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel14.setBackground(new java.awt.Color(255, 204, 255));

        jLabel22.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 0, 0));
        jLabel22.setText("Informacion de La Cuenta");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(152, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel13.add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 50));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/circulorosaclaro.png"))); // NOI18N
        jPanel13.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 120, 110));

        jLabel19.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 0));
        jLabel19.setText("Usuario");
        jPanel13.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 160, -1));

        jLabel20.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 0, 0));
        jLabel20.setText("Contrase√±a");
        jPanel13.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 150, -1, -1));

        jl_usuarioCuenta.setForeground(new java.awt.Color(0, 0, 0));
        jl_usuarioCuenta.setText("jLabel21");
        jPanel13.add(jl_usuarioCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, 160, 30));

        jl_contrase√±aCuenta.setForeground(new java.awt.Color(0, 0, 0));
        jl_contrase√±aCuenta.setText("jLabel23");
        jPanel13.add(jl_contrase√±aCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 180, 100, 30));

        javax.swing.GroupLayout jd_cuentaLayout = new javax.swing.GroupLayout(jd_cuenta.getContentPane());
        jd_cuenta.getContentPane().setLayout(jd_cuentaLayout);
        jd_cuentaLayout.setHorizontalGroup(
            jd_cuentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jd_cuentaLayout.setVerticalGroup(
            jd_cuentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
        );

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));

        jPanel16.setBackground(new java.awt.Color(255, 204, 204));

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 82, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tf_usuarioBase.setBackground(new java.awt.Color(204, 204, 204));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Usuario");

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 0, 0));
        jLabel21.setText("Contrase√±a");

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 0, 0));
        jLabel23.setText("Crear Usuario en Base de Datos");

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 0, 0));
        jLabel24.setText("Asignar permisos");

        bt_crearuserBase.setBackground(new java.awt.Color(255, 204, 204));
        bt_crearuserBase.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bt_crearuserBase.setForeground(new java.awt.Color(0, 0, 0));
        bt_crearuserBase.setText("Crear Usuario");
        bt_crearuserBase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_crearuserBaseMouseClicked(evt);
            }
        });

        jPanel17.setBackground(new java.awt.Color(255, 204, 204));
        jPanel17.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cb_gestionUsuarios.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cb_gestionUsuarios.setForeground(new java.awt.Color(0, 0, 0));
        cb_gestionUsuarios.setText("Gestion de Nuevos Usuarios");
        jPanel17.add(cb_gestionUsuarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        cb_create.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cb_create.setForeground(new java.awt.Color(0, 0, 0));
        cb_create.setText("Create");
        jPanel17.add(cb_create, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        cb_select.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cb_select.setForeground(new java.awt.Color(0, 0, 0));
        cb_select.setText("Select");
        jPanel17.add(cb_select, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        cb_insert.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cb_insert.setForeground(new java.awt.Color(0, 0, 0));
        cb_insert.setText("Insert");
        jPanel17.add(cb_insert, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        cb_drop.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cb_drop.setForeground(new java.awt.Color(0, 0, 0));
        cb_drop.setText("Drop");
        jPanel17.add(cb_drop, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));

        cb_delete1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cb_delete1.setForeground(new java.awt.Color(0, 0, 0));
        cb_delete1.setText("Delete");
        jPanel17.add(cb_delete1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        pf_contraUser.setBackground(new java.awt.Color(204, 204, 204));
        pf_contraUser.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(bt_crearuserBase, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel15Layout.createSequentialGroup()
                                    .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(26, 26, 26)
                                    .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(tf_usuarioBase, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                                        .addComponent(pf_contraUser))))))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_usuarioBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(pf_contraUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bt_crearuserBase)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout jd_baseUsuariosLayout = new javax.swing.GroupLayout(jd_baseUsuarios.getContentPane());
        jd_baseUsuarios.getContentPane().setLayout(jd_baseUsuariosLayout);
        jd_baseUsuariosLayout.setHorizontalGroup(
            jd_baseUsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jd_baseUsuariosLayout.setVerticalGroup(
            jd_baseUsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jmi_AgregarUsuario.setText("Agregar Usuario");
        jmi_AgregarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_AgregarUsuarioActionPerformed(evt);
            }
        });
        popup_opcionesBases.add(jmi_AgregarUsuario);

        jmi_cambiarUsuario.setText("Cambiar Usuario");
        jmi_cambiarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_cambiarUsuarioActionPerformed(evt);
            }
        });
        popup_opcionesBases.add(jmi_cambiarUsuario);

        jmi_AgregarTabla.setText("Agregar Tabla");
        popup_opcionesBases.add(jmi_AgregarTabla);

        jmi_eliminarBase.setText("Eliminar Base de Datos");
        popup_opcionesBases.add(jmi_eliminarBase);

        jmi_diagramarBase.setText("Diagramar Base");
        popup_opcionesBases.add(jmi_diagramarBase);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Bell MT", 3, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Log-In");

        jLabel2.setFont(new java.awt.Font("Bell MT", 0, 25)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Contrase√±a");

        jLabel3.setFont(new java.awt.Font("Bell MT", 0, 25)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Usuario");

        pf_contra.setBackground(new java.awt.Color(255, 255, 255));
        pf_contra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pf_contraActionPerformed(evt);
            }
        });

        tf_usuarioo.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        bt_ingresar.setBackground(new java.awt.Color(255, 153, 153));
        bt_ingresar.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        bt_ingresar.setForeground(new java.awt.Color(0, 0, 0));
        bt_ingresar.setText("Ingresar");
        bt_ingresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_ingresarActionPerformed(evt);
            }
        });

        bt_notengousuario.setBackground(new java.awt.Color(251, 172, 172));
        bt_notengousuario.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_notengousuario.setForeground(new java.awt.Color(0, 0, 0));
        bt_notengousuario.setText("No tienes un usuario? Crear usuario");
        bt_notengousuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_notengousuarioMouseClicked(evt);
            }
        });
        bt_notengousuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_notengousuarioActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 204, 204));
        jLabel4.setForeground(new java.awt.Color(255, 204, 204));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/mo√±oEditado-removebg-preview.png"))); // NOI18N
        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bt_ingresar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(bt_notengousuario)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                        .addComponent(pf_contra, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(tf_usuarioo, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(63, 63, 63))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tf_usuarioo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(pf_contra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(bt_ingresar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(bt_notengousuario)
                .addGap(20, 20, 20))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_notengousuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_notengousuarioMouseClicked

    }//GEN-LAST:event_bt_notengousuarioMouseClicked

    private void bt_okMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_okMouseClicked
        jd_error.setVisible(false);
    }//GEN-LAST:event_bt_okMouseClicked

    private void bt_cuentapginicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_cuentapginicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bt_cuentapginicioActionPerformed

    private void bt_iniciopginicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_iniciopginicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bt_iniciopginicioActionPerformed

    private void bt_nuevoBaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_nuevoBaseActionPerformed
        jd_inicio.setVisible(false);
        this.setVisible(false);
        //expandir(jd_espaciodetrabajo);

        //jd_espaciodetrabajo.setLocationRelativeTo(this);
        jd_espaciodetrabajo.setVisible(true);


    }//GEN-LAST:event_bt_nuevoBaseActionPerformed

    private void bt_nuevoBaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_nuevoBaseMouseClicked
        jd_inicio.setVisible(false);
        this.setVisible(false);

        expandir(jd_espaciodetrabajo);


    }//GEN-LAST:event_bt_nuevoBaseMouseClicked

    private void bt_nuevopginicioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_nuevopginicioMouseClicked
        //EN EL CONSTR
        jd_inicio.setVisible(false);
        expandir(jd_espaciodetrabajo);

    }//GEN-LAST:event_bt_nuevopginicioMouseClicked

    private void bt_cuentapginicioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_cuentapginicioMouseClicked
        jl_usuarioCuenta.setText(ingresoUsuario);
        jl_contrase√±aCuenta.setText(ingresoContrase√±a);
        expandir(jd_cuenta);

    }//GEN-LAST:event_bt_cuentapginicioMouseClicked

    private void tp_sqlInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tp_sqlInputMethodTextChanged


    }//GEN-LAST:event_tp_sqlInputMethodTextChanged

    private void bt_sendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_sendMouseClicked

        try {
            String palabras[] = tp_sql.getText().split(" ");
        } catch (IndexOutOfBoundsException e) {
            jd_error.setVisible(true);
            jl_error.setText("No ingreso los campos de la tabla");
        }

        String sql = tp_sql.getText(); 
        
        String palabras[] = tp_sql.getText().split(" ");//split de los comandos

        DefaultTreeModel arbol = (DefaultTreeModel) jtree_baseddatos.getModel();
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) arbol.getRoot();

        if (palabras[0].equals("CREATE") && palabras[1].equals("DATABASE")) {
            boolean entro = false;
            sqlcorrecto = true; 
            
            for (int i = 0; i < userActual.getPermisos().size(); i++) {
                if (userActual.getPermisos().get(i).equalsIgnoreCase("Create")) {
                    limpiezaNueva2();
                    DefaultMutableTreeNode basenueva = new DefaultMutableTreeNode(new BasedeDatos(palabras[2]));
                    raiz.add(basenueva);
                    arbol.reload();
                    base_seleccionada = (BasedeDatos) basenueva.getUserObject();
                    base_actual = (BasedeDatos)basenueva.getUserObject(); 
                    File script = new File("./"+palabras[2]+"/script");
                    DefaultMutableTreeNode nodo_s = new DefaultMutableTreeNode(script);
                    basenueva.add(nodo_s);
                    File dir = new File("./" + palabras[2]);
                    dir.mkdir(); //CREACION DEL DIRECTORIO
                    System.out.println(base_seleccionada);
                    nodo_seleccionado = basenueva;
                    //base_seleccionada = (BasedeDatos) nodo_seleccionado.getUserObject();
                    tp_sql.setText("");
                    JOptionPane.showMessageDialog(jd_espaciodetrabajo, "Base de datos creada exitosamente");
                    entro = true;
    //                    Usuario mia = usuarios.get(0); 
    //                    Usuario ale = usuarios.get(1); 
    //                    mia.getBases().add(palabras[2]);
    //                    ale.getBases().add(palabras[2]);  
                    userActual.getBases().add(palabras[2]);
                    
                    File usuarios_base = new File("./"+palabras[2]+"/usuarios");
                    DefaultMutableTreeNode nodo_u = new DefaultMutableTreeNode(usuarios_base);
                    basenueva.add(nodo_u);
                    ArrayList<Usuario> permitidos = new ArrayList<>();
                    for (int j = 0; j < usuarios.size(); j++) {
                        //for bases
                        System.out.println("user - "+usuarios.get(j));
                        for (int k = 0; k < usuarios.get(j).getBases().size(); k++) {
                            //for permisos
                            System.out.println("permiso"+usuarios.get(j).getBases().get(k));
                            if (usuarios.get(j).getBases().get(k).equals(palabras[2])) {
                                permitidos.add(this.usuarios.get(j));
                            }
                        }
                    }
                    System.out.println("-------- "+permitidos);
                    
                    FileWriter fw = null; 
                    BufferedWriter bw = null;
                    try {
                        fw = new FileWriter(usuarios_base, false);
                        fw.close();
                        
                        fw = new FileWriter(usuarios_base, false);
                        bw = new BufferedWriter(fw);
                        
                        bw.write("‚òÖ Base - "+palabras[2]);
                        bw.newLine();
                        bw.write("‚òÖ Usuarios ‚òÖ");
                        bw.newLine();
                        bw.newLine();
                        for (int j = 0; j < permitidos.size(); j++) {
                            Usuario temp = permitidos.get(j);
                            bw.write("- Usuario: "+temp.getUsuario()+" | Contrase√±a: "+temp.getContrasenia());
                            bw.newLine();
                        }  
                        bw.flush();
                        bw.close();
                        fw.close();
                    } catch (Exception e) {
                    }
                }
            }
            if (entro == false) {
                jl_error.setText("No tiene permiso para crear bases de datos");
                expandir(jd_error);
                tp_sql.setText("");
            }
        } //validar que seleccione una base pa poder crear una tabla dentro de esto
        //validar que no se cree una base de datos con el mimso nombre cada vez 
        else if (palabras[0].equals("CREATE") && palabras[1].equals("TABLE")) {
            //Comando #CREATE TABLE nombre_tabla  (campo1, campo2, campo3....campo-n)
            boolean entro = false;
            sqlcorrecto = true;

            for (int i = 0; i < userActual.getPermisos().size(); i++) {
                if (userActual.getPermisos().get(i).equalsIgnoreCase("Create")) {
                    limpiezaNueva2();

                    try {
                        String[] campos1 = tp_sql.getText().split("\\(");// CRT TABL nombre (   ||  campo1, campo2, campo3....campo-n)     
                        String[] campos2 = campos1[1].split("\\)"); //campo1, campo2, campo3....campo-n  ||   )
                        camposcreate = campos2[0].split(","); //campo1 || campo2 || campon
                        String[] nombre = palabras[2].split("\\("); //nombre[0] es el nombre del archivo
                        File archivo = null;
                        FileWriter fw = null;
                        BufferedWriter bw = null;

                        try {
                            Date f = new Date();
                            SimpleDateFormat sd = new SimpleDateFormat("dd/MMMM/yyyy");
                            String fecha = sd.format(f);

                            archivo = new File(".\\" + base_seleccionada + "\\" + nombre[0] + ".txt");
                            System.out.println(archivo.getPath());
                            fw = new FileWriter(archivo);
                            bw = new BufferedWriter(fw);

                            bw.write("‚òÖENCABEZADO");
                            bw.newLine();
                            bw.write("nombre: " + nombre[0]);
                            bw.newLine();
                            bw.write("creador(a): " + userActual.getUsuario());
                            bw.newLine();
                            bw.write("fecha_creacion: " + fecha);
                            bw.newLine();
                            bw.write("atributos: " + campos2[0]);
                            bw.newLine();
                            bw.newLine();

                            bw.write("‚òÖDETALLE");
                            bw.newLine();

                            bw.flush();
                            bw.close();
                            fw.close();

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        System.out.println(archivo.getPath());

                        DefaultTableModel tabla = (DefaultTableModel) tabla_esptrabajo.getModel();
                        DefaultTableModel modelo_a = tabla;

                        for (int j = 0; j < camposcreate.length; j++) {
                            modelo_a.addColumn(camposcreate[j]);
                        }

                        tabla_esptrabajo.setModel(modelo_a);
//            Object v1 = jtree_baseddatos.getSelectionPath().getLastPathComponent();
//            nodo_seleccionado = (DefaultMutableTreeNode) v1;

                        DefaultMutableTreeNode archv = new DefaultMutableTreeNode(archivo);
                        nodo_seleccionado.add(archv);

                        arbol.reload();

                    } catch (IndexOutOfBoundsException e) {
                        jl_error.setText("No ingreso los campos de la tabla");
                        expandir(jd_error);
                    }
                    entro = true;
                }
            }

            if (entro == false) {
                jl_error.setText("No tiene permiso para crear tablas");
                expandir(jd_error);
                tp_sql.setText("");
            }

        } else if (palabras[0].equals("INSERT") && palabras[1].equals("INTO") && palabras[3].equals("VALUES")) {
            //Comando #INSERT INTO nombre_tabla VALUES(valor1, valor2, valor3......valorn)
            boolean entro = false;
            boolean encontro = false;
            sqlcorrecto = true;
            for (int i = 0; i < userActual.getPermisos().size(); i++) {
                if (userActual.getPermisos().get(i).equals("Insert")) {
                    entro = true;
                    DefaultTableModel tablita = (DefaultTableModel) tabla_esptrabajo.getModel();
                    String nombretab = palabras[2] + ".txt";
                    String[] campos1 = palabras[4].split("\\(");
                    String[] campos2 = campos1[1].split("\\)"); //campo1, campo2, campo3....campo-n  ||   )

                    camposinsert = campos2[0].split(",");

                    //buscar archivo de texto de la tabla
                    //sacar de ahi el numero de columnas
                    //comparar con las que me pone en el
                    File archivo = null;
                    FileReader fr = null;
                    BufferedReader br = null;
                    //HAY QUE BUSCAR LA TABLA ANTES DE LEER

                    DefaultTreeModel modeloArbol = (DefaultTreeModel) jtree_baseddatos.getModel();
                    DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) modeloArbol.getRoot();
                    for (int j = 0; j < nodoRaiz.getChildCount(); j++) {
                        DefaultMutableTreeNode hijo = (DefaultMutableTreeNode) nodoRaiz.getChildAt(j);
                        base_actual = (BasedeDatos)hijo.getUserObject();
                        System.out.println(base_actual);
                        if (hijo.getChildCount() > 0) {
                            for (int k = 0; k < hijo.getChildCount(); k++) {
                                DefaultMutableTreeNode hijoDelhijo = (DefaultMutableTreeNode) hijo.getChildAt(k);
                                File hijodelhijo_uso = (File) hijoDelhijo.getUserObject();
                                String pat = hijodelhijo_uso.getPath();
                                String[] paths = pat.split("\\\\");
                                System.out.println("---------------------------------------");
                                for (int l = 0; l < paths.length; l++) {
                                    System.out.print(paths[l] + " | ");
                                }
                                if (paths[2].equals(nombretab)) {
                                    //base_seleccionada = (BasedeDatos)hijoDelhijo.getUserObject(); 
                                    try {
                                        archivo = new File("./" + paths[1] + "/" + nombretab);
                                        fr = new FileReader(archivo);
                                        br = new BufferedReader(fr);
                                        String lin = "";
                                        br.readLine();
                                        br.readLine();
                                        br.readLine();
                                        br.readLine();

                                        String colum = br.readLine();
                                        String[] c = colum.split(" "); //atributos:  ||   b1,b2,b3   
                                        col = c[1].split(","); //cam1 || cam2 || cam3 
                                        limpiezaNueva2();

                                        for (int X = 0; X < col.length; X++) {
                                            tablita.addColumn(col[X]);
                                        }

                                        br.close();
                                        fr.close();
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }

                                    tabla_esptrabajo.setModel(tablita);

                                    if (camposinsert.length < col.length) {
                                        jl_error.setText("No ingreso datos para todas las columnas");
                                        expandir(jd_error);
                                        break;
                                    } else if (col.length < camposinsert.length) {
                                        jl_error.setText("Ingreso datos de mas \npara las columnas");
                                        expandir(jd_error);
                                        break;
                                    }

                                    archivo = null;
                                    FileWriter fw = null;
                                    BufferedWriter bw = null;

                                    try {
                                        archivo = new File("./" + paths[1] + "/" + palabras[2] + ".txt");
                                        fw = new FileWriter(archivo, true);
                                        bw = new BufferedWriter(fw);
                                        bw.write(campos2[0] + "\n");

                                        encontro = true;
                                        bw.flush();
                                        bw.close();
                                        fw.close();

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }

                                    reflejar("./" + paths[1] + "/" + nombretab);
                                    encontro = true;
                                    if (encontro == false) {
                                        jl_error.setText("No existe esa tabla en el sistema");
                                        expandir(jd_error);
                                    }

                                }//FIN DE LO QEU ES 
                            }//cierre del for del hijo de los hijos
                        }//SI LOS HIJOS SON MAYOR A 0

                    }//cierre del for del hijo de la raiz

                }//cierre del if permisos

            }//cierre for permisos
            if (entro == false) {
                jl_error.setText("No tiene el permiso para insertar informacion");
                expandir(jd_error);
            }

        } else if (palabras[0].equals("DROP") && palabras[1].equals("DATABASE")) {
            boolean entro = false;
            boolean existe = false;
            sqlcorrecto = true;

            for (int j = 0; j < userActual.getPermisos().size(); j++) {
                if (userActual.getPermisos().get(j).equals("Drop")) {
                    String nombreBase = palabras[2];
                    DefaultTreeModel modeloArbol = (DefaultTreeModel) jtree_baseddatos.getModel();
                    DefaultMutableTreeNode raiz2 = (DefaultMutableTreeNode) modeloArbol.getRoot();
                    for (int i = 0; i < raiz2.getChildCount(); i++) {
                        DefaultMutableTreeNode temp = (DefaultMutableTreeNode) raiz2.getChildAt(i);
                        if (temp.getUserObject() instanceof BasedeDatos) {

                            BasedeDatos p = (BasedeDatos) temp.getUserObject();
                            if (p.getNombre().equals(nombreBase)) {
                                existe = true;

                                raiz2.remove(i);
                                limpiezaNueva();
                                limpiezaNueva2();
                                eliminarBase("./" + p.getNombre());
                            }
                        }
                        modeloArbol.reload();
                    }
                    entro = true;
                    if (existe == false) {
                        jl_error.setText("No existe esa Base");
                        expandir(jd_error);
                    }
                }
            }//cierre for si tiene permiso
            if (entro == false) {
                jl_error.setText("No tiene permiso para DROP");
                expandir(jd_error);
            }

        } else if (palabras[0].equals("DROP") && palabras[1].equals("TABLE")) {
            boolean entro = false;
            boolean existe = false;
            sqlcorrecto = true;

            for (int j = 0; j < userActual.getPermisos().size(); j++) {
                if (userActual.getPermisos().get(j).equals("Drop")) {
                    String nombretab = palabras[2] + ".txt";
                    DefaultTreeModel modeloArbol = (DefaultTreeModel) jtree_baseddatos.getModel();
                    DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) modeloArbol.getRoot();
                    for (int h = 0; h < nodoRaiz.getChildCount(); h++) {//recorrido de las bases de datos
                        //System.out.println("base de datos");
                        DefaultMutableTreeNode hijoraiz = (DefaultMutableTreeNode) nodoRaiz.getChildAt(h);
                        base_actual = (BasedeDatos)hijoraiz.getUserObject();
                        for (int a = 0; a < hijoraiz.getChildCount(); a++) {
                            DefaultMutableTreeNode hijodelhijo = (DefaultMutableTreeNode) hijoraiz.getChildAt(a);
                            System.out.println(hijodelhijo.getUserObject() + "-");
                            File hijodelhijo_uso = (File) hijodelhijo.getUserObject();
                            String pat = hijodelhijo_uso.getPath();
                            String[] paths = pat.split("\\\\");
                            if (paths[2].equals(nombretab)) {
                                existe = true;
                                //System.out.println("encontro la tabla");
                                hijoraiz.remove(hijodelhijo);
                                BasedeDatos c = (BasedeDatos) hijoraiz.getUserObject();
                                File base = new File("./" + c.getNombre());
                                File[] tablas = base.listFiles();
                                for (int b = 0; b < tablas.length; b++) {
                                    //System.out.println(tablas[b].getName()+"------");
                                    if (tablas[b].getName().equals(nombretab)) {
                                        tablas[b].delete();
                                    }
                                }

                            }//encontro la tabla y la borra 
                        }//for de los hijos del hijo de la raiz
                    }//for hijos de la raiz
                    if (existe == false) {
                        jl_error.setText("No existe tabla bajo ese nombre");
                        expandir(jd_error);
                    }
                    modeloArbol.reload();
                    entro = true;

                }//if de permisos
            }//cierre for permisos busqueda 
            if (entro == false) {
                jl_error.setText("No tiene permiso para DROP");
                expandir(jd_error);
            }

        } else if (palabras[0].equals("TRUNCATE") && palabras[1].equals("TABLE")) {
            String nombretab = palabras[2] + ".txt";
            boolean existe = false;
            sqlcorrecto = true;
            DefaultTreeModel modeloArbol = (DefaultTreeModel) jtree_baseddatos.getModel();
            DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) modeloArbol.getRoot();
            for (int h = 0; h < nodoRaiz.getChildCount(); h++) {//recorrido de las bases de datos
                //System.out.println("base de datos");
                DefaultMutableTreeNode hijoraiz = (DefaultMutableTreeNode) nodoRaiz.getChildAt(h);
                base_actual = (BasedeDatos)hijoraiz.getUserObject();
                for (int a = 0; a < hijoraiz.getChildCount(); a++) {
                    DefaultMutableTreeNode hijodelhijo = (DefaultMutableTreeNode) hijoraiz.getChildAt(a);
                    System.out.println(hijodelhijo.getUserObject() + "-");
                    File hijodelhijo_uso = (File) hijodelhijo.getUserObject();
                    String pat = hijodelhijo_uso.getPath();
                    String[] paths = pat.split("\\\\");
                    if (paths[2].equals(nombretab)) {
                        existe = true;
                        File archivo = new File("./" + paths[1] + "/" + nombretab);
                        String atri = "";
                        try {
                            FileReader fr = new FileReader(archivo);
                            BufferedReader br = new BufferedReader(fr);
                            String lin = "";
                            br.readLine();
                            br.readLine();
                            br.readLine();
                            br.readLine();

                            String colum = br.readLine();
                            String[] c = colum.split(" "); //atributos:  ||   b1,b2,b3   
                            atri = c[1];

                            br.close();
                            fr.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        FileWriter fw = null;
                        BufferedWriter bw = null;
                        try {
                            fw = new FileWriter(archivo, false);
                            fw.close();
                            //------------------Borrado
                            //escritura de nuevo
                            Date f = new Date();
                            SimpleDateFormat sd = new SimpleDateFormat("dd/MMMM/yyyy");
                            String fecha = sd.format(f);

                            fw = new FileWriter(archivo);
                            bw = new BufferedWriter(fw);

                            bw.write("‚òÖENCABEZADO");
                            bw.newLine();
                            bw.write("nombre: " + palabras[2]);
                            bw.newLine();
                            bw.write("creador(a): " + userActual.getUsuario());
                            bw.newLine();
                            bw.write("fecha_creacion: " + fecha);
                            bw.newLine();
                            bw.write("atributos: " + atri);
                            bw.newLine();
                            bw.newLine();

                            bw.write("‚òÖDETALLE");
                            bw.newLine();

                            bw.flush();
                            bw.close();
                            fw.close();

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        reflejar("./" + paths[1] + "/" + nombretab);

                    }//encontro la tabla
                }//for de los hijos del hijo de la raiz
            }//for hijos de la raiz
            if (existe == false) {
                jl_error.setText("No existe tabla bajo ese nombre");
                expandir(jd_error);
            }

        }else if (palabras[0].equals("UPDATE") && palabras[2].equals("SET") && palabras[4].equals("WHERE")){
            String nombretab = palabras[1]+".txt";
            boolean existe = false; 
            sqlcorrecto = true; 
            DefaultTreeModel modeloArbol = (DefaultTreeModel)jtree_baseddatos.getModel(); 
                        DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode)modeloArbol.getRoot(); 
                        for (int h = 0; h < nodoRaiz.getChildCount(); h++) {//recorrido de las bases de datos
                            //System.out.println("base de datos");
                            DefaultMutableTreeNode hijoraiz = (DefaultMutableTreeNode)nodoRaiz.getChildAt(h); 
                            for (int a = 0; a < hijoraiz.getChildCount(); a++) {
                                DefaultMutableTreeNode hijodelhijo = (DefaultMutableTreeNode)hijoraiz.getChildAt(a);
                                System.out.println(hijodelhijo.getUserObject()+"-");
                                File hijodelhijo_uso = (File)hijodelhijo.getUserObject(); 
                                    String pat = hijodelhijo_uso.getPath(); 
                                    String [] paths = pat.split("\\\\");
                                    if (paths[2].equals(nombretab)) {
                                        String [] parte1 = palabras[3].split("="); 
                                        String campoSet = parte1[0]; //campo set 
                                        String valorSet = parte1[1]; //valor set 
                                        String [] parte2 = palabras[5].split("=");
                                        String campoWhere = parte2[0];//campo where
                                        String valorWhere = parte2[1];//valor where
                                        boolean campos = false; 
                                        int con = 0; 
                                        FileReader fr = null; 
                                        BufferedReader br = null; 
                                        File archivo = new File("./"+paths[1]+"/"+nombretab);  
                                        try {
                                            fr = new FileReader(archivo);
                                            br = new BufferedReader(fr); 
                                            br.readLine();
                                            br.readLine();
                                            br.readLine();
                                            br.readLine();
                                            String lin = br.readLine(); 
                                            String [] p = lin.split(" "); //atributos: campos //campos estan en p[1]
                                            String [] campitos = p[1].split(",");// campos1 campos2 campos3
                                            int posSet = 0; 
                                            int posWhere = 0; 
                                            for (int i = 0; i < campitos.length; i++) {
                                                if (campitos[i].equals(campoSet)) {
                                                    con++; 
                                                    posSet = i; 
                                                }else if ( campitos[i].equals(campoWhere)){
                                                    con++;
                                                    posWhere = i; 
                                                }
                                            }
                                            br.readLine();
                                            br.readLine();
                                           
                                            String temp; 
                                            ArrayList<String> detalle = new ArrayList<>(); 
                                            while ((temp = br.readLine()) != null) {                                                
                                                detalle.add(temp); 
                                            }
                                            //System.out.println("-------"+detalle.size());
                                            
                                            br.close();
                                            fr.close();
                                            
                                            if (con == 2) {
                                                campos = true; 
                                            }
                                            ArrayList<String> detalleModificado = new ArrayList<>(); 
                                            if (campos) {
                                                for (int i = 0; i < detalle.size(); i++) {
                                                    String [] modi = detalle.get(i).split(",");
                                                    if (modi[posWhere].equals(valorWhere)) {
                                                        modi[posSet] = valorSet; 
                                                    }
                                                    String mod = ""; 
                                                    for (int j = 0; j < modi.length; j++) {
                                                        if (j < modi.length-1) {
                                                            mod+=modi[j]+","; 
                                                        }else{
                                                            mod+=modi[j];
                                                        }
                                                    }
                                                    detalleModificado.add(mod);
                                                }
                                                System.out.println(detalleModificado);
                                                //comienzo de borrar
                                                FileWriter fw = null; 
                                                BufferedWriter bw = null; 
                                                try {
                                                    fw = new FileWriter(archivo, false); 
                                                    fw.close();
                                                    //borrado de contenido para reescribir
                                                    
                                                    Date f = new Date();
                                                    SimpleDateFormat sd = new SimpleDateFormat("dd/MMMM/yyyy");
                                                    String fecha = sd.format(f);
                                                
                                                    fw = new FileWriter(archivo);
                                                    bw = new BufferedWriter(fw);
                                                    
                                                    bw.write("‚òÖENCABEZADO");
                                                    bw.newLine();
                                                    bw.write("nombre: " + palabras[1]);
                                                    bw.newLine();
                                                    bw.write("creador(a): " + userActual.getUsuario());
                                                    bw.newLine();
                                                    bw.write("fecha_creacion: " + fecha);
                                                    bw.newLine();
                                                    bw.write("atributos: " + p[1]);
                                                    bw.newLine();
                                                    bw.newLine();
                                                    
                                                    bw.write("‚òÖDETALLE");
                                                    bw.newLine();
                                                    
                                                    for (int i = 0; i < detalleModificado.size(); i++) {
                                                        bw.write(detalleModificado.get(i));
                                                        bw.newLine();
                                                    }
                                                    
                                                    
                                                    bw.flush();
                                                    bw.close();
                                                    fw.close();
                                                    reflejar(pat);
                                                    
                                                } catch (Exception e) {
                                                    e.printStackTrace();
                                                }
                                                
                                                
                                            }//si los campos son correctos 
                                            else{
                                                jl_error.setText("Los campos no concuerdan");
                                                expandir(jd_error);
                                            }
                                            
                                            
                                        } catch (Exception e) {
                                        }
                                         
                                        
                                    }//validacion de encontrar tabla
                            }//recorrido tablas
                        }//recorrido bases 
            
            
            
        }else if (palabras[0].equals("DELETE") && palabras[1].equals("FROM") && palabras[3].equals("WHERE")){
            boolean entro = false; 
            sqlcorrecto = true;
            for (int i = 0; i < userActual.getPermisos().size(); i++) {
                if (userActual.getPermisos().get(i).equalsIgnoreCase("Delete")) {
                    entro = true; 
                    String nombretab = palabras[2]+".txt";
                    DefaultTreeModel modeloArbol = (DefaultTreeModel)jtree_baseddatos.getModel(); 
                        DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode)modeloArbol.getRoot(); 
                        for (int h = 0; h < nodoRaiz.getChildCount(); h++) {//recorrido de las bases de datos
                            //System.out.println("base de datos");
                            DefaultMutableTreeNode hijoraiz = (DefaultMutableTreeNode)nodoRaiz.getChildAt(h); 
                            for (int a = 0; a < hijoraiz.getChildCount(); a++) {
                                DefaultMutableTreeNode hijodelhijo = (DefaultMutableTreeNode)hijoraiz.getChildAt(a);
                                System.out.println(hijodelhijo.getUserObject()+"-");
                                File hijodelhijo_uso = (File)hijodelhijo.getUserObject(); 
                                    String pat = hijodelhijo_uso.getPath(); 
                                    String [] paths = pat.split("\\\\");
                                    if (paths[2].equals(nombretab)) {
                                        String [] val = palabras[4].split("="); 
                                        String campoVal = val[0]; 
                                        String valorVal = val[1]; 
                                        int posCampo = 0;
                                        FileReader fr = null; 
                                        BufferedReader br = null; 
                                        File archivo = new File("./"+paths[1]+"/"+nombretab);  
                                        try {
                                            fr = new FileReader(archivo);
                                            br = new BufferedReader(fr);
                                            br.readLine();
                                            br.readLine();
                                            br.readLine();
                                            br.readLine();
                                            String lin = br.readLine(); 
                                            String [] p = lin.split(" "); //atributos: campos //campos estan en p[1]
                                            String [] campitos = p[1].split(",");// campos1 campos2 campos3
                                            boolean encontro = false; 
                                            for (int j = 0; j < campitos.length; j++) {
                                                if (campitos[j].equals(campoVal)) {
                                                      encontro = true; 
                                                      posCampo = j;
                                                }//fin encontro el campo en la table 
                                            }
                                            if (encontro) {
                                                
                                                    br.readLine();
                                                    br.readLine();

                                                    String temp; 
                                                    ArrayList<String> detalle = new ArrayList<>(); 
                                                    while ((temp = br.readLine()) != null) {                                                
                                                        detalle.add(temp); 
                                                    }
                                      
                                                    br.close();
                                                    fr.close();
                                                    
                                                    //ArrayList<String> detalleMod = new ArrayList<>(); 
                                                    for (int j = 0; j < detalle.size(); j++) {
                                                        String [] detalles = detalle.get(j).split(",");
                                                        if (detalles[posCampo].equals(valorVal)) {
                                                            detalle.remove(j);
                                                        }   
                                                    }
                                                    
                                                    FileWriter fw = null; 
                                                    BufferedWriter bw = null; 
                                                    try {
                                                        fw = new FileWriter(archivo, false); 
                                                        fw.close();
                                                        
                                                        Date f = new Date();
                                                        SimpleDateFormat sd = new SimpleDateFormat("dd/MMMM/yyyy");
                                                        String fecha = sd.format(f);

                                                        fw = new FileWriter(archivo);
                                                        bw = new BufferedWriter(fw);
                                                        
                                                        bw.write("‚òÖENCABEZADO");
                                                        bw.newLine();
                                                        bw.write("nombre: " + palabras[1]);
                                                        bw.newLine();
                                                        bw.write("creador(a): " + userActual.getUsuario());
                                                        bw.newLine();
                                                        bw.write("fecha_creacion: " + fecha);
                                                        bw.newLine();
                                                        bw.write("atributos: " + p[1]);
                                                        bw.newLine();
                                                        bw.newLine();

                                                        bw.write("‚òÖDETALLE");
                                                        bw.newLine();
                                                        for (int g = 0; g < detalle.size(); g++) {
                                                            bw.write(detalle.get(g));
                                                            bw.newLine();
                                                        }
                                                        bw.flush();
                                                        bw.close();
                                                        fw.close();
                                                        reflejar(pat);
                                                        
                                                        
                                                        
                                                        
                                                    } catch (Exception e) {
                                                        e.printStackTrace();
                                                    }
                                                    
                                                     
                                            }else{
                                                jl_error.setText("No se encontro el campo bajo ese nombre");
                                                expandir(jd_error);
                                            }
                                            
                                            
                                        } catch (Exception e) {
                                        }
                                        
                                        
                                        
                                        
                                        
                                        
                                    }
                            }
                        }
                    
                }
            }
            if (entro == false) {
                jl_error.setText("No tiene permiso Delete en esta base");
                expandir(jd_error);
            }
            
        }

        else if (palabras[0].equals("SELECT")) {
            //# SELECT campo1, campo2.. Campo-n FROM nombre_tabla (WHERE campox= algo) // que me muestre los campos que le mando de tal tabla 
            
            boolean entro = false;
            boolean existe = false;
            boolean sies = false;
            sqlcorrecto = true;
            String simbolo = " ";
            limpiezaNueva();
            limpiezaNueva2();
            String saltolinea[] = tp_sql.getText().split("\\n");
            DefaultTableModel ta = (DefaultTableModel) tabla_esptrabajo.getModel();
            ArrayList<String> pal = new ArrayList();
            ArrayList <Integer> posiciones = new ArrayList();
            
            for (int r = 0; r < userActual.getPermisos().size(); r++) {
                if (userActual.getPermisos().get(r).equalsIgnoreCase("Create")) {
                    entro = true;
                    
                    if (saltolinea.length == 1) {
                        jl_error.setText("Ingrese el comando from");
                        expandir(jd_error);
                        
                    } else {
                        
                        linea1 = saltolinea[0].split(" "); //SELECT  ||   CAMPOS,CAMPOS,CAMPOS
                        campos = linea1[1].split(","); //campo  || campo  || campo
                        linea2 = saltolinea[1].split(" "); // FROM  || tabla
                        nombretab2 = linea2[1].trim();
                        
                        
                        if(!(linea2[1].contains(","))){ //solo hay 1 tabla
                                DefaultTreeModel modeloArbol = (DefaultTreeModel) jtree_baseddatos.getModel();
                                DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) modeloArbol.getRoot();
                                
                                for (int h = 0; h < nodoRaiz.getChildCount(); h++) {//recorrido de las bases de datos
                                    DefaultMutableTreeNode hijoraiz = (DefaultMutableTreeNode) nodoRaiz.getChildAt(h);
                                    base_actual = (BasedeDatos) hijoraiz.getUserObject();

                                    for (int a = 0; a < hijoraiz.getChildCount(); a++) {

                                        DefaultMutableTreeNode hijodelhijo = (DefaultMutableTreeNode) hijoraiz.getChildAt(a);
//                          
                                        File hijodelhijo_uso = (File) hijodelhijo.getUserObject();
                                        String pat = hijodelhijo_uso.getPath(); //path del hijo del hijo


                                        String[] paths = pat.split("\\\\");

                                        if (paths[2].equals(nombretab2 + ".txt")) {

                                            existe = true;
                                            File archivo = new File("./" + paths[1] + "/" + nombretab2 + ".txt");
                                            String atri = "";

                                            try {
                                                FileReader fr = new FileReader(archivo);
                                                BufferedReader br = new BufferedReader(fr);
                                                String lin = "";
                                                br.readLine();
                                                br.readLine();
                                                br.readLine();
                                                br.readLine();

                                                String colum = br.readLine();
                                                String[] c = colum.split(" "); //atributos:  ||   b1,b2,b3   
                                                atri = c[1];
                                                atributosArchivo = atri.split(",");
                                                br.readLine();
                                                br.readLine();

                                                if (linea1[1].contains("*")) { //quiere ver todas las columnas

                                                    if (saltolinea.length < 3) { //si no tiene where
                                                        jl_error.setText("Ingrese el comando where ya que su select esta vacio");
                                                        expandir(jd_error);

                                                    } else if (saltolinea.length == 3) {//hay where
                                                        String w[] = saltolinea[2].split(" "); //WHERE  ||  campo><=3
                                                        String condicion[] = w[1].split("(?<=[>=<])"); //campo= || valor
                                                        
                                                        if (condicion[0].endsWith("=")) {
                                                            simbolo = "=";
                                                            campoin = condicion[0].split("="); //campo || =
                                                            
                                                        } else if (condicion[0].endsWith(">")) {
                                                            simbolo = ">";
                                                            campoin = condicion[0].split(">");
                                                            
                                                        } else if (condicion[0].endsWith("<")) {
                                                            simbolo = "<";
                                                            campoin = condicion[0].split("<");
                                                        } // tiene where

                                                        for (int j = 0; j < atributosArchivo.length; j++) {
                                                            ta.addColumn(atributosArchivo[j]);//setea tdoas las columnas a mostrar
                                                        }

                                                        int posatri = 1;
                                                        for (int i = 0; i < atributosArchivo.length; i++) {
                                                            if ((campoin[0].trim()).equals(atributosArchivo[i].trim())) {
                                                                //COINCIDE HASTA LA SEGUNDA
                                                                sies = true;
                                                                posatri = i; //posicion de la columna del atributo
                                                                break;
                                                            }  
                                                        }
                                                        
                                                        String linea = "";
                                                        String temp[];

                                                        while ((linea = br.readLine()) != null) {

                                                            temp = linea.split(",");

                                                            int num = 0;
                                                            String cad = "";

                                                            if (simbolo.equals("=")) {
                                                                cad = condicion[1];
                                                                if (temp[posatri].equals(cad)) {
                                                                    ta.addRow(temp);
                                                                }
    //                                                      
                                                            } else if (simbolo.equals("<")) {
                                                                {
                                                                    try {
                                                                        num = Integer.parseInt(condicion[1]); //revisa si es un int                                                   

                                                                        if (Integer.parseInt(temp[posatri]) < num) {
                                                                            ta.addRow(temp);
                                                                        }

                                                                    } catch (NumberFormatException e) {
                                                                        cad = condicion[1];
                                                                        JOptionPane.showMessageDialog(jd_espaciodetrabajo, "No puede calcular si una palabra es menor/mayor que otra");

                                                                    }
                                                                }
                                                            } else if (simbolo.equals(">")) {
                                                                {
                                                                    try {
                                                                        num = Integer.parseInt(condicion[1]); //revisa si es un int

                                                                        if (Integer.parseInt(temp[posatri]) > num) {
                                                                            ta.addRow(temp);

                                                                        }

                                                                    } catch (NumberFormatException e) {
                                                                        cad = condicion[1];
                                                                        JOptionPane.showMessageDialog(jd_espaciodetrabajo, "No puede calcular si una palabra es menor/mayor que otra");

                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                if (sies == false) {
                                                    jl_error.setText("El campo solicitado en el where \n no es un campo de la tabla");
                                                    expandir(jd_error);
                                                }

                                            } else if (linea1[1] != "*") { // si el select no esta vacio
                                                String[] p = linea1[1].split(",");
                                                
                                                if (!(linea1[1].contains(","))) { //solo 1 campo quiere mostrar
                                                    String campoSelect = linea1[1];
                                                   

                                                    int posatri = 1;
                                                    for (int i = 0; i < atributosArchivo.length; i++) {
                                                        if ((campoSelect.trim()).equals(atributosArchivo[i].trim())) {

                                                            sies = true;
                                                            posatri = i; //posicion de la columna del atributo
                                                        }  //FIN IF TRIM

                                                    }
                                                    if (sies == false) {
                                                        jl_error.setText("El campo solicitado no es correcto");
                                                        expandir(jd_error);

                                                    }

                                                    if (sies = true) {
                                                        ta.addColumn(campoSelect);
                                                    }

                                                    String temp[];
                                                    String linea = "";

                                                    while ((linea = br.readLine()) != null) {

                                                        temp = linea.split(",");
                                                        pal.add(temp[posatri]);

                                                    }

                                                    String[] palabrasMostrar = new String[pal.size()];
                                                    for (int i = 0; i < pal.size(); i++) {//rellena el array con los elementos del arraylist
                                                        palabrasMostrar[i] = pal.get(i);//mria || pepe || lala
                                                    }

                                                    String[] palabra = new String[1];

                                                    for (int j = 0; j < 1; j++) {
                                                        for (int k = 0; k < palabrasMostrar.length; k++) {//rellena otro array de solo 1 elemento para poner de row
                                                            palabra[j] = palabrasMostrar[k];
                                                            ta.addRow(palabra);
                                                        }

                                                    }

                                                } else if (linea1[1].contains(",")) { // quiere mostrar mas de 1 campo
                                                    String arreglito[] = linea1[1].split(","); // campos del select
                                                    ArrayList <String> camposcorrectos = new ArrayList();
                                                    ArrayList <Integer> posdDetalles = new ArrayList();
                                                    // c1,c2,c3
                                                    //c3,c2,c1

                                                    
                                                    int posatri = 1;
                                                    int contincorrectos = 0;
                                                    
                                                    
                                                    for (int i = 0; i < arreglito.length; i++) {
                                                        boolean correct = false; 
                                                        for (int j = 0; j < atributosArchivo.length; j++) {
                                                            if (arreglito[i].trim().equals(atributosArchivo[j].trim())) {
                                                                camposcorrectos.add(arreglito[i]);
                                                                
                                                                posdDetalles.add(j);
                                                                correct = true; 
                                                                break;
                                                            }
                                                        }
                                                        if (correct==false) {
                                                            contincorrectos++; 
                                                        }
                                                    }
                                                    
                                                    
                                                    
                                                    //llena el array de lo q tengo en mi arraylist
                                                    String [] camposcorrectosArray = new String [camposcorrectos.size()];
                                                    for (int i = 0; i < camposcorrectosArray.length; i++) {
                                                        camposcorrectosArray[i] = camposcorrectos.get(i);
                                                    }
                                                    
                                                    
                                                    if (contincorrectos>0) {
                                                        jl_error.setText("Alguno de los campos solicitados no es correcto");
                                                        expandir(jd_error);
                                                        limpiezaNueva();
                                                        limpiezaNueva();
                                                    }
                                                    else{
                                                        for (int i = 0; i < camposcorrectosArray.length; i++) {
                                                            ta.addColumn(camposcorrectosArray[i]);
                                                        }
                                                         
                                                         
                                                    String temp[];
                                                    String linea = "";
                                                    String camposMostrar[] = new String[posdDetalles.size()];

                                                    while ((linea = br.readLine()) != null) {

                                                        temp = linea.split(",");
                                                        //temp en la pos de los atributos que manda
                                                        //mama,23,12341190
                                                        
                                                        for (int i = 0; i < camposMostrar.length; i++) {
                                                            camposMostrar[i] = temp[posdDetalles.get(i % posdDetalles.size())];
                                                        }

                                                        ta.addRow(camposMostrar);

                                                         

                                                    }
                                                         
                                                        
                                                    }
                                                    
                                                } else if (campos.length > atributosArchivo.length) {

                                                    jl_error.setText("Esta solicitando campos de mas");
                                                    expandir(jd_error);

                                                }
                                            }

                                            //agarrar la pos del atributo en el archivo para solo sacar eso de los detalles
                                            br.close();
                                            fr.close();
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }

                                        tabla_esptrabajo.setModel(ta);

                                    }//encontro la tabla
                                }//for de los hijos del hijo de la raiz
                            }//for hijos de la raiz

                        }
                        else if (linea2[1].contains(",")){//HAY2 TABLAS
                            DefaultTableModel tablita = (DefaultTableModel) tabla_esptrabajo.getModel();
                            String tablasYcampos [] = linea1[1].split(","); //nombre.campo  ||| uni.campo ||  jojo.campoo
                            String tablas [] = linea2[1].split(",");
                            System.out.println("entra a 2 tablas");
                            boolean existe1=false;
                            boolean existe2 = false;
                            String campostab1[] = buscarAtributosTXT(tablas[0]);
                            String campostab2[] = buscarAtributosTXT(tablas[1]);
                            String pi [] = new String[2]; 
                            
                            for (int i = 0; i < tablasYcampos.length; i++) {
                                pi = tablasYcampos[i].split("\\."); // nombre || campo
                                
                                
                                String nomtabcruce = pi[0];
                                String campotabcruce = pi[1]; //a mostrar
                                
                                
                                int posAtributo = 0; 
                                if(nomtabcruce.equals(tablas[0])){
                                    for (int j = 0; j < campostab1.length; j++) {
                                        if(campostab1[j].equals(campotabcruce)){
                                            posAtributo = j;
                                            tablita.addColumn(campotabcruce);
                                            
                                        }
                                    }
                                }
                                else if (nomtabcruce.equals(tablas[1])){
                                    for (int j = 0; j < campostab2.length; j++) {
                                         if(campostab2[j].equals(campotabcruce)){
                                            posAtributo = j;
                                            tablita.addColumn(campotabcruce);
                                            
                                        }
                                    }
                                }
                                else{
                                    jl_error.setText("Alguna de las tablas del select son incorrectas");
                                    expandir(jd_error);
                                }
                                
                                
                            }

                    
//leida de detalles de la tab1
                    File archivo1 = null;
                    FileReader fr1 = null;
                    BufferedReader br1 = null;
                    

                    DefaultTreeModel modeloArbol = (DefaultTreeModel) jtree_baseddatos.getModel();
                    DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) modeloArbol.getRoot();
                    for (int j = 0; j < nodoRaiz.getChildCount(); j++) {
                        DefaultMutableTreeNode hijo = (DefaultMutableTreeNode) nodoRaiz.getChildAt(j);
                        base_actual = (BasedeDatos)hijo.getUserObject();
                        System.out.println(base_actual);
                        if (hijo.getChildCount() > 0) {
                            for (int k = 0; k < hijo.getChildCount(); k++) {
                                DefaultMutableTreeNode hijoDelhijo = (DefaultMutableTreeNode) hijo.getChildAt(k);
                                File hijodelhijo_uso = (File) hijoDelhijo.getUserObject();
                                String pat = hijodelhijo_uso.getPath();
                                String[] paths = pat.split("\\\\");
                                
                                if (paths[2].equals(tablas[0] + ".txt")) {
                                    existe1=true;
                                    try {
                                        archivo1 = new File("./" + paths[1] + "/" + tablas[0]+".txt");
                                        fr1 = new FileReader(archivo1);
                                        br1 = new BufferedReader(fr1);
                                        String lin = "";
                                        br1.readLine();
                                        br1.readLine();
                                        br1.readLine();
                                        br1.readLine();

                                        String colum = br1.readLine();
                                        br1.readLine();
                                        br1.readLine();

                                        

                                                String linea1 = "";
                                                String temp1[];
                                                
                                                
                                                while ((linea1 = br1.readLine()) != null) {

                                                            temp1 = linea1.split(",");
                                                            detalles1.add(linea1);
                                                           
                                                }
                                        br1.close();
                                        fr1.close();
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        }
                    }
                    
 //fin de leida de detalles de tab 1 
              
                 
//leida de detalles de la tab2
                    File archivo2 = null;
                    FileReader fr2 = null;
                    BufferedReader br2 = null;
                    //HAY QUE BUSCAR LA TABLA ANTES DE LEER

                    DefaultTreeModel modeloArbol2 = (DefaultTreeModel) jtree_baseddatos.getModel();
                    DefaultMutableTreeNode nodoRaiz2 = (DefaultMutableTreeNode) modeloArbol.getRoot();
                    for (int j = 0; j < nodoRaiz.getChildCount(); j++) {
                        DefaultMutableTreeNode hijo = (DefaultMutableTreeNode) nodoRaiz.getChildAt(j);
                        base_actual = (BasedeDatos)hijo.getUserObject();
                        System.out.println(base_actual);
                        if (hijo.getChildCount() > 0) {
                            for (int k = 0; k < hijo.getChildCount(); k++) {
                                DefaultMutableTreeNode hijoDelhijo = (DefaultMutableTreeNode) hijo.getChildAt(k);
                                File hijodelhijo_uso = (File) hijoDelhijo.getUserObject();
                                String pat = hijodelhijo_uso.getPath();
                                String[] paths = pat.split("\\\\");
                                
                                if (paths[2].equals(tablas[1] + ".txt")) {
                                    existe2=true;
                                    try {
                                        archivo2 = new File("./" + paths[1] + "/" + tablas[1]+".txt");
                                        fr2 = new FileReader(archivo2);
                                        br2 = new BufferedReader(fr2);
                                        
                                        br2.readLine();
                                        br2.readLine();
                                        br2.readLine();
                                        br2.readLine();

                                        String colum = br2.readLine();
                                        br2.readLine();
                                        br2.readLine();
                                        String lineaa = "";
                                        String temp2[];
                                        
                                        
                                        while ((lineaa = br2.readLine()) != null) {

                                                            temp2 = lineaa.split(",");
                                                            detalles2.add(lineaa);
                                                            
                                                            
//                                                             if (simbolo.equals("=")) {
//                                                                cad = condicion[1];
//                                                                if (temp2[posatri].equals(cad)) {
//                                                                    ta.addRow(temp2);
//                                                                }
//    //                                                      
//                                                            } else if (simbolo.equals("<")) {
//                                                                {
//                                                                    try {
//                                                                        num = Integer.parseInt(condicion[1]); //revisa si es un int                                                   
//
//                                                                        if (Integer.parseInt(temp2[posatri]) < num) {
//                                                                            ta.addRow(temp2);
//                                                                        }
//
//                                                                    } catch (NumberFormatException e) {
//                                                                        cad = condicion[1];
//                                                                        JOptionPane.showMessageDialog(jd_espaciodetrabajo, "No puede calcular si una palabra es menor/mayor que otra");
//
//                                                                    }
//                                                                }
//                                                            } else if (simbolo.equals(">")) {
//                                                                {
//                                                                    try {
//                                                                        num = Integer.parseInt(condicion[1]); //revisa si es un int
//
//                                                                        if (Integer.parseInt(temp2[posatri]) > num) {
//                                                                            ta.addRow(temp2);
//
//                                                                        }
//
//                                                                    } catch (NumberFormatException e) {
//                                                                        cad = condicion[1];
//                                                                        JOptionPane.showMessageDialog(jd_espaciodetrabajo, "No puede calcular si una palabra es menor/mayor que otra");
//
//                                                                    }
//                                                                }
//                                                            }
                                   
                                        }

                                        br2.close();
                                        fr2.close();
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        }
                    }
                    
//fin de leida de detalles de tab 2

//WHERE
                                        String w[] = saltolinea[2].split(" "); //WHERE  ||  campo><=3
                                        String condicion[] = w[1].split("(?<=[>=<])"); //campo= || valor

                                        if (condicion[0].endsWith("=")) {
                                            simbolo = "=";
                                            campoin = condicion[0].split("="); //campo || =

                                        } else if (condicion[0].endsWith(">")) {
                                            simbolo = ">";
                                            campoin = condicion[0].split(">");

                                        } else if (condicion[0].endsWith("<")) {
                                            simbolo = "<";
                                            campoin = condicion[0].split("<");
                                        } // tiene where
                                        
                                        
                            int posA = 0;
                            int posB = 0;
                            String acomparar1="";
                            String acomparar2="";
                            
                            
                            if (w[1].contains(".")) {//esta comparando campos de tabla
                                //Persona.nombre = notas.Nombre_Persona
                                String tyc[] = campoin[0].split("\\."); //Persona || nombre
                                String tyc2[] = condicion[1].split("\\."); // notas || nompersona
                                
                                ArrayList <String> iguales = new ArrayList();
                                System.out.println("entra al where de la w");
                                
                                //det1 es de lo que esta en el 0
                                     for (int i = 0; i < campostab1.length; i++) {
                                         if(tyc[1].equals(campostab1[i])){
                                             posA=i;//posicion del campo para buscar en los detalles 1
                                         }
                                     }
                                     
                                     for (int i = 0; i < campostab2.length; i++) {
                                         if (tyc2[1].equals(campostab2[i])){
                                             posB=i;
                                         }
                                     }
                                     
                                     for (int i = 0; i < detalles1.size(); i++) {
                                         String sp [] = detalles1.get(i).split(",");
                                         for (int j = 0; j < sp.length; j++) {
                                             if (j==posA){
                                                 acomparar1=sp[j];
                                             }
                                         }
                                     }
                                     
                                     for (int i = 0; i < detalles2.size(); i++) {
                                         String sp2 [] = detalles2.get(i).split(",");
                                         for (int j = 0; j < sp2.length; j++) {
                                             if (j==posB){
                                                 acomparar2=sp2[j];
                                             }
                                         }
                                     }
                                     if (acomparar1.trim().equals(acomparar2)){
                                         iguales.add(acomparar1);
                                     }
                                 
                                     for (int i = 0; i < iguales.size(); i++) {
                                         System.out.println("777777777777777777777");
                                         System.out.println(iguales.get(i));
                                }

                            }
                            
                        if (existe1 == false || existe2==false) {
                            jl_error.setText("No existe tabla bajo ese nombre");
                            expandir(jd_error);
                        }
                        }

                        

                }
            }
            }
            
            if (entro == false) {
                jl_error.setText("No tiene permiso para select en tablas");
                expandir(jd_error);
                tp_sql.setText("");
            }
            

        }else if (palabras[0].equals("GRANT") && palabras[2].equals("TO")){
            if (palabras.length > 3 ) {
               
                String base = palabras[1];
                String user = palabras[3];
                boolean existeBase = false;
                boolean existeUser = false;
                for (int i = 0; i < usuarios.size(); i++) {
                    if (usuarios.get(i).getUsuario().equals(user)) {
                        existeUser = true; 
                    }
                }
                DefaultTreeModel modeloArbol = (DefaultTreeModel)jtree_baseddatos.getModel();
                DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode)modeloArbol.getRoot();
                for (int i = 0; i < nodoRaiz.getChildCount(); i++) {
                    DefaultMutableTreeNode hijo = (DefaultMutableTreeNode)nodoRaiz.getChildAt(i);
                    if (hijo.getUserObject() instanceof BasedeDatos) {
                        BasedeDatos baseHijo = (BasedeDatos)hijo.getUserObject();
                        if (baseHijo.getNombre().equals(base) && existeUser == true) {
                            for (int j = 0; j < usuarios.size(); j++) {
                                if (usuarios.get(j).getUsuario().equals(user)) {
                                    usuarios.get(j).getBases().add(base);
                                     sqlcorrecto = true; 
                                }
                            }
                        } 
                    }
                }
                if (existeUser == false && existeBase == false) {
                    jl_error.setText("El usuario o la base no existen");
                    expandir(jd_error);
                }
                
            }else{
                jl_error.setText("EL texto ingresado no clasifica");
                expandir(jd_error);
            }
            
            
        
        } 
        else {
            JOptionPane.showMessageDialog(jd_espaciodetrabajo, "El texto ingresado no es un comando SQL. \n Ingrese el comando nuevamente");
            sqlcorrecto = false; 
        }

        tp_sql.setText("");
        if (sqlcorrecto) {
            File script = new File("./" + base_actual.getNombre() + "/script");
            FileWriter fw = null;
            BufferedWriter bw = null;
            try {
                fw = new FileWriter(script, true);
                bw = new BufferedWriter(fw);

                bw.write(sql);
                bw.newLine();
                
                bw.flush();
                bw.close();
                fw.close();

            } catch (Exception e) {
            }
                
            DefaultComboBoxModel cajita = (DefaultComboBoxModel)comboSql.getModel(); 
            cajita.removeAllElements();
            try {
                FileReader fr = new FileReader(script);
                BufferedReader br = new BufferedReader(fr);
                String temp = "";
                while ((temp = br.readLine()) != null) {                
                    cajita.addElement(temp);
                }
                br.close();
                fr.close();
            } catch (Exception e) {
            }
        }
        
        
        
        


    }//GEN-LAST:event_bt_sendMouseClicked

    private void bt_clearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_clearMouseClicked
        tp_sql.setText("");
    }//GEN-LAST:event_bt_clearMouseClicked

    private void jtree_baseddatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtree_baseddatosMouseClicked
        if (!(jtree_baseddatos.isSelectionEmpty())) {
            int row = jtree_baseddatos.getClosestRowForLocation(evt.getX(), evt.getY());
            jtree_baseddatos.setSelectionRow(row);
            System.out.println(jtree_baseddatos.getSelectionPath());
            Object v1 = jtree_baseddatos.getSelectionPath().getLastPathComponent();
            nodo_seleccionado = (DefaultMutableTreeNode) v1;

            if (nodo_seleccionado.getUserObject() instanceof BasedeDatos) {
                //System.out.println("Esta es una base de datos");
                base_seleccionada = (BasedeDatos) nodo_seleccionado.getUserObject();
                if (evt.isMetaDown()) {
                    popup_opcionesBases.show(evt.getComponent(), evt.getX(), evt.getY());

                }

            } else if (nodo_seleccionado.getUserObject() instanceof DefaultTableModel) {
                //System.out.println("9");
                //limpiezaNueva();
                //DefaultTableModel m = (DefaultTableModel)nodo_seleccionado.getUserObject();
                //JTable tabla = tabla_esptrabajo; 
                DefaultTableModel tablagui = (DefaultTableModel) tabla_esptrabajo.getModel();
                tablagui.setColumnCount(0);
                tabla_esptrabajo.setModel(tablagui);

                DefaultTableModel m = (DefaultTableModel) nodo_seleccionado.getUserObject();
                tabla_esptrabajo.setModel(m);
                System.out.println(m.getColumnCount());

            }
            //System.out.println("-------------------");
            //System.out.println(nodo_seleccionado.getUserObject());
        }

    }//GEN-LAST:event_jtree_baseddatosMouseClicked

    private void bt_newdatabaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_newdatabaseMouseClicked
        DefaultTreeModel arbol = (DefaultTreeModel) jtree_baseddatos.getModel();
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) arbol.getRoot();
        BasedeDatos base = new BasedeDatos(JOptionPane.showInputDialog("Nombre de la base de datos"));
        DefaultMutableTreeNode basenueva = new DefaultMutableTreeNode(base);
        raiz.add(basenueva);

        arbol.reload();
        File archivo = new File("./" + base.getNombre());
        archivo.mkdir();
        JOptionPane.showMessageDialog(jd_espaciodetrabajo, "Base de datos creada exitosamente");
        
        File usuarios_base = new File("./"+base.getNombre()+"/usuarios");
                    DefaultMutableTreeNode nodo_u = new DefaultMutableTreeNode(usuarios_base);
                    basenueva.add(nodo_u);
                    ArrayList<Usuario> permitidos = new ArrayList<>();
                    for (int j = 0; j < usuarios.size(); j++) {
                        //for bases
                        System.out.println("user - "+usuarios.get(j));
                        for (int k = 0; k < usuarios.get(j).getBases().size(); k++) {
                            //for permisos
                            System.out.println("permiso"+usuarios.get(j).getBases().get(k));
                            if (usuarios.get(j).getBases().get(k).equals(base.getNombre())) {
                                permitidos.add(this.usuarios.get(j));
                            }
                        }
                    }
                    System.out.println("-------- "+permitidos);
                    
                    FileWriter fw = null; 
                    BufferedWriter bw = null;
                    try {
                        fw = new FileWriter(usuarios_base, false);
                        fw.close();
                        
                        fw = new FileWriter(usuarios_base, false);
                        bw = new BufferedWriter(fw);
                        
                        bw.write("‚òÖ Base - "+base.getNombre());
                        bw.newLine();
                        bw.write("‚òÖ Usuarios ‚òÖ");
                        bw.newLine();
                        bw.newLine();
                        for (int j = 0; j < permitidos.size(); j++) {
                            Usuario temp = permitidos.get(j);
                            bw.write("- Usuario: "+temp.getUsuario()+" | Contrase√±a: "+temp.getContrasenia());
                            bw.newLine();
                        }  
                        bw.flush();
                        bw.close();
                        fw.close();
                    } catch (Exception e) {
                    }

    }//GEN-LAST:event_bt_newdatabaseMouseClicked

    private void bt_elimbaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_elimbaseMouseClicked
        
        String nombre = JOptionPane.showInputDialog("Ingrese el nombre de la base a Eliminar: ");
        DefaultTreeModel modeloArbol = (DefaultTreeModel)jtree_baseddatos.getModel();
        DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode)modeloArbol.getRoot();
        boolean existio = false;
        for (int i = 0; i < nodoRaiz.getChildCount(); i++) {
            DefaultMutableTreeNode hijo = (DefaultMutableTreeNode)nodoRaiz.getChildAt(i);
            if (((BasedeDatos)hijo.getUserObject()).getNombre().equals(nombre)) {
                nodoRaiz.remove(hijo);
                existio = true;
            }
        }
        
        if (existio == false) {
            jl_error.setText("La base de Datos no existe o escribio el nombre incorrecto");
            expandir(jd_error);
        }
        modeloArbol.reload();
        jtree_baseddatos.setModel(modeloArbol);
        
        
    }//GEN-LAST:event_bt_elimbaseMouseClicked

    private void jmi_eliminarbaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_eliminarbaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmi_eliminarbaseActionPerformed

    private void jl_abrirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jl_abrirMouseClicked
        JFileChooser fileChooser = new JFileChooser();
    }//GEN-LAST:event_jl_abrirMouseClicked

    private void bt_crearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_crearActionPerformed

        Usuario user = new Usuario(tf_crearnombreusuario.getText(), pf_contracrearusuario.getText());
        user.getPermisos().add("Gestion de Nuevos Usuarios");
        user.getPermisos().add("Create");
        user.getPermisos().add("Select");
        user.getPermisos().add("Insert");
        user.getPermisos().add("Delete");
        user.getPermisos().add("Drop");
        usuarios.add(user);
        tf_crearnombreusuario.setText("");
        pf_contracrearusuario.setText("");
        JOptionPane.showMessageDialog(jd_crearusuario, "Usuario creado exitosamente");
        jd_crearusuario.setVisible(false);
        tf_usuarioo.setText("");
        pf_contra.setText("");

        this.setVisible(true);
    }//GEN-LAST:event_bt_crearActionPerformed

    private void bt_ingresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_ingresarActionPerformed

        if (usuarios.isEmpty()) {
            jl_error.setText("No existen usuarios, cree uno");
            expandir(jd_error);
        } else {
            for (int i = 0; i < usuarios.size(); i++) {
                if (usuarios.get(i).getUsuario().equals(tf_usuarioo.getText()) && usuarios.get(i).getContrasenia().equals(pf_contra.getText())) {
                    userActual = usuarios.get(i);
                    System.out.println(userActual);
                    jl_bienvenido.setText(tf_usuarioo.getText());
                    ingresoUsuario = tf_usuarioo.getText();
                    ingresoContrase√±a = pf_contra.getText();
                    this.setVisible(false);
                    expandir(jd_inicio);
                }

            }

        }
        arbolLleno();

        tf_usuarioo.setText("");
        pf_contra.setText("");


    }//GEN-LAST:event_bt_ingresarActionPerformed

    private void bt_notengousuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_notengousuarioActionPerformed

        this.setVisible(false);
        expandir(jd_crearusuario);
    }//GEN-LAST:event_bt_notengousuarioActionPerformed

    private void pf_contraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pf_contraActionPerformed
        boolean userExiste = false;
        if (usuarios.isEmpty()) {
            jl_error.setText("No existen usuarios, cree uno");
            expandir(jd_error);
        } else {
            for (int i = 0; i < usuarios.size(); i++) {
                if (usuarios.get(i).getUsuario().equals(tf_usuarioo.getText()) && usuarios.get(i).getContrasenia().equals(pf_contra.getText())) {
                    userActual = usuarios.get(i);
                    jl_bienvenido.setText(tf_usuarioo.getText());
                    ingresoUsuario = tf_usuarioo.getText();
                    ingresoContrase√±a = pf_contra.getText();
                    this.setVisible(false);
                    System.out.println(userActual);
                    expandir(jd_inicio);
                    userExiste = true;

                }

            }
            if (userExiste == false) {
                jl_error.setText("El usuario que ingreso no existe");
                expandir(jd_error);
            }

        }
        arbolLleno();

        tf_usuarioo.setText("");
        pf_contra.setText("");
    }//GEN-LAST:event_pf_contraActionPerformed

    private void bt_crearuserBaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_crearuserBaseMouseClicked
        Usuario temp = new Usuario(tf_usuarioBase.getText(), pf_contraUser.getText());
        if (cb_gestionUsuarios.isSelected()) {
            temp.getPermisos().add(cb_gestionUsuarios.getText());
        }
        if (cb_create.isSelected()) {
            temp.getPermisos().add(cb_create.getText());
        }
        if (cb_select.isSelected()) {
            temp.getPermisos().add(cb_select.getText());
        }
        if (cb_insert.isSelected()) {
            temp.getPermisos().add(cb_insert.getText());
        }
        if (cb_delete1.isSelected()) {
            temp.getPermisos().add(cb_delete1.getText());
        }
        if (cb_drop.isSelected()) {
            temp.getPermisos().add(cb_drop.getText());
        }
        usuarios.add(temp);
        tf_usuarioBase.setText("");
        pf_contraUser.setText("");
        //System.out.println(usuarios);
        //System.out.println(temp.getPermisos());
        jd_baseUsuarios.setVisible(false);
        System.out.println("123 - "+base_actual);
        File archivo = new File("./"+base_actual.getNombre()+"/usuarios");
        System.out.println(archivo.getPath());
        FileWriter fw = null;
        BufferedWriter bw = null; 
        try {
            fw = new FileWriter(archivo,true);
            bw = new BufferedWriter(fw);
            bw.write("- Usuario: "+temp.getUsuario()+" | Contrase√±a: "+temp.getContrasenia());
            bw.newLine();
            bw.flush();
            bw.close();
            fw.close();
            
        } catch (Exception e) {
        }
        

    }//GEN-LAST:event_bt_crearuserBaseMouseClicked

    private void jmi_AgregarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_AgregarUsuarioActionPerformed
        expandir(jd_baseUsuarios);

    }//GEN-LAST:event_jmi_AgregarUsuarioActionPerformed

    private void jmi_cambiarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_cambiarUsuarioActionPerformed
        jd_espaciodetrabajo.setVisible(false);
        this.setVisible(true);

    }//GEN-LAST:event_jmi_cambiarUsuarioActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        jd_inicio.setVisible(false);
        this.setVisible(false);
        //expandir(jd_espaciodetrabajo);

        //jd_espaciodetrabajo.setLocationRelativeTo(this);
        jd_espaciodetrabajo.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        jd_inicio.setVisible(false);
        this.setVisible(true);

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void bt_nuevopginicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_nuevopginicioActionPerformed
        jd_inicio.setVisible(false);
        this.setVisible(false);
        //expandir(jd_espaciodetrabajo);

        //jd_espaciodetrabajo.setLocationRelativeTo(this);
        jd_espaciodetrabajo.setVisible(true);

    }//GEN-LAST:event_bt_nuevopginicioActionPerformed

    private void bt_abrirpginicioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_abrirpginicioMouseClicked

        JFileChooser jf = new JFileChooser("./");
        int seleccion = jf.showSaveDialog(jd_inicio);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File ar = jf.getSelectedFile();
            reflejar(ar.getPath());
            jd_inicio.setVisible(false);
            expandir(jd_espaciodetrabajo);
        }
    }//GEN-LAST:event_bt_abrirpginicioMouseClicked

    private void bt_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_sendActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bt_sendActionPerformed

    private void tp_sqlKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tp_sqlKeyPressed
        if (espaciosApretados == 0) {
            String palabras[] = tp_sql.getText().split(" ");

            if (palabras[0].equals("CREATE")) {

                try {
                    StyleConstants.setForeground(estilo, Color.pink);
                    doc.setCharacterAttributes(0, 6, tp_sql.getStyle("estilo"), true);
                    if (palabras.length > 1 && palabras[1].equals("DATABASE")) {
                        try {
                            StyleConstants.setForeground(estilo, Color.pink);
                            doc.setCharacterAttributes(7, 8, tp_sql.getStyle("estilo"), true);

                        } catch (Exception e) {
                        }
                    }
                    if (palabras.length > 1 && palabras[1].equals("TABLE")) {
                        try {
                            StyleConstants.setForeground(estilo, Color.pink);
                            doc.setCharacterAttributes(7, 5, tp_sql.getStyle("estilo"), true);

                        } catch (Exception e) {
                        }
                    }
                    //espaciosApretados = 1; 
                } catch (Exception e) {
                }
            } else if (palabras[0].equals("INSERT")) {

                try {
                    StyleConstants.setForeground(estilo, Color.pink);
                    doc.setCharacterAttributes(0, 6, tp_sql.getStyle("estilo"), true);
                    if (palabras.length > 1 && palabras[1].equals("INTO")) {

                        try {
                            StyleConstants.setForeground(estilo, Color.pink);
                            doc.setCharacterAttributes(7, 4, tp_sql.getStyle("estilo"), true);

                            if (palabras.length > 3 && palabras[3].equals("VALUES")) {
                                int n = palabras[2].length() + 13; //se suma a los indices mas espacios el nombre de la database

                                try {
                                    StyleConstants.setForeground(estilo, Color.pink);
                                    doc.setCharacterAttributes(n, 6, tp_sql.getStyle("estilo"), true);

                                } catch (Exception e) {
                                }
                            }

                        } catch (Exception e) {
                        }
                    }
                    //espaciosApretados = 1; 
                } catch (Exception e) {
                }
            } else if (palabras[0].equals("DROP")) {
                try {
                    StyleConstants.setForeground(estilo, Color.pink);
                    doc.setCharacterAttributes(0, 4, tp_sql.getStyle("estilo"), true);
                    if (palabras.length > 1 && palabras[1].equals("DATABASE")) {
                        try {
                            StyleConstants.setForeground(estilo, Color.pink);
                            doc.setCharacterAttributes(5, 8, tp_sql.getStyle("estilo"), true);

                        } catch (Exception e) {
                        }
                    }
                    if (palabras.length > 1 && palabras[1].equals("TABLE")) {
                        try {
                            StyleConstants.setForeground(estilo, Color.pink);
                            doc.setCharacterAttributes(5, 5, tp_sql.getStyle("estilo"), true);

                        } catch (Exception e) {
                        }
                    }
                } catch (Exception e) {
                }
            } else if (palabras[0].equals("TRUNCATE")) {
                try {
                    StyleConstants.setForeground(estilo, Color.pink);
                    doc.setCharacterAttributes(0, 8, tp_sql.getStyle("estilo"), true);
                    if (palabras.length > 1 && palabras[1].equals("TABLE")) {
                        try {
                            StyleConstants.setForeground(estilo, Color.pink);
                            doc.setCharacterAttributes(9, 5, tp_sql.getStyle("estilo"), true);

                        } catch (Exception e) {
                        }
                    }
                } catch (Exception e) {
                }

            } else if (palabras[0].equals("SELECT")) {

                try {
                    StyleConstants.setForeground(estilo, Color.pink);
                    doc.setCharacterAttributes(0, 6, tp_sql.getStyle("estilo"), true);

                    if (palabras.length > 1 && palabras[1].equals("INTO")) {

                        try {
                            StyleConstants.setForeground(estilo, Color.pink);
                            doc.setCharacterAttributes(7, 4, tp_sql.getStyle("estilo"), true);

                            if (palabras.length > 3 && palabras[3].equals("VALUES")) {
                                int n = palabras[2].length() + 13; //se suma a los indices mas espacios el nombre de la database

                                try {
                                    StyleConstants.setForeground(estilo, Color.pink);
                                    doc.setCharacterAttributes(n, 6, tp_sql.getStyle("estilo"), true);

                                } catch (Exception e) {
                                }
                            }

                        } catch (Exception e) {
                        }
                    }
                    //espaciosApretados = 1; 
                } catch (Exception e) {
                }
            }else if (palabras[0].equals("UPDATE")){
                try {
                    StyleConstants.setForeground(estilo, Color.pink);
                    doc.setCharacterAttributes(0, 6, tp_sql.getStyle("estilo"), true);
                    if (palabras.length > 2 && palabras[2].equals("SET")) {
                        int n = 7+palabras[1].length()+1;
                        try {
                            StyleConstants.setForeground(estilo, Color.pink);
                            doc.setCharacterAttributes(n, 3, tp_sql.getStyle("estilo"), true);
                            if (palabras.length > 4 && palabras[4].equals("WHERE")) {
                                int s = n+10; 
                                try {
                                    StyleConstants.setForeground(estilo, Color.pink);
                                    doc.setCharacterAttributes(s, 5, tp_sql.getStyle("estilo"), true);
                                } catch (Exception e) {
                                }
                            }
                        } catch (Exception e) {
                        }
                    }
                } catch (Exception e) {
                }
            }else if (palabras[0].equals("GRANT")){
                try {
                    StyleConstants.setForeground(estilo, Color.pink);
                    doc.setCharacterAttributes(0, 5, tp_sql.getStyle("estilo"), true);
                    System.out.println("------ "+palabras.length);
                    if (palabras.length > 1 && palabras[2].equals("TO")) {
                        System.out.println("sientre");
                        int e = 7+palabras[1].length();
                        try {
                            StyleConstants.setForeground(estilo, Color.pink);
                            doc.setCharacterAttributes(e, 2, tp_sql.getStyle("estilo"), true);
                        } catch (Exception ex) {
                            
                        }
                    }
                } catch (Exception e) {
                }
                
                
                
            }
            else {

            }
        }

    }//GEN-LAST:event_tp_sqlKeyPressed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        
        int in = comboSql.getSelectedIndex(); 
        String comando = comboSql.getItemAt(in); 
        if (tp_sql.getText().trim().isEmpty()) {
            tp_sql.setText(comando);
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
       jd_espaciodetrabajo.setVisible(false);
        this.setVisible(true);
    }//GEN-LAST:event_jButton1MouseClicked

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaginaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaginaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaginaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaginaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaginaInicio().setVisible(true);
            }
        });
    }

    public void eliminarBase(String path) {
        try {
            File directorio = new File(path);
            File[] archivos = directorio.listFiles();
            System.out.println("++++++++++++++++");
            System.out.println(path);
            for (int i = 0; i < archivos.length; i++) {
                archivos[i].delete();
            }

            //File[] archivos2 = directorio.listFiles();
            if (directorio != null) {
                directorio.delete();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void reflejar(String nom) {

        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        try {
            archivo = new File(nom);
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            String lin = "";
            br.readLine();
            br.readLine();
            br.readLine();
            br.readLine();
            br.readLine();
            br.readLine();
            br.readLine(); //se salta las 7

//            for (int j = 0; j < cont; j++) { //se salta las lineas q ya estan en la tabla
//                br.readLine();
//            }
            DefaultTableModel m = (DefaultTableModel) tabla_esptrabajo.getModel();
            boolean esta = false;
            limpiezaNueva();
            while ((lin = br.readLine()) != null) {

                if (col.length == camposinsert.length) {
                    String[] n = lin.split(",");
                    m.addRow(n);
                }

            }

            tabla_esptrabajo.setModel(m);

            br.close();
            fr.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void reflejarSelect(String nom) {

        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        try {
            archivo = new File(nom);
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            String lin = "";
            br.readLine();
            br.readLine();
            br.readLine();
            br.readLine();
            br.readLine();
            br.readLine();
            br.readLine(); //se salta las 7

            DefaultTableModel m = (DefaultTableModel) tabla_esptrabajo.getModel();
            boolean esta = false;
            limpiezaNueva();
            while ((lin = br.readLine()) != null) {

                if (col.length == camposinsert.length) {
                    String[] n = lin.split(",");
                    m.addRow(n);
                }

            }

            tabla_esptrabajo.setModel(m);

            br.close();
            fr.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void limpiezaNueva() {
        DefaultTableModel modeli = (DefaultTableModel) tabla_esptrabajo.getModel();
        modeli.setRowCount(0);
        tabla_esptrabajo.setModel(modeli);

    }

    public void limpiezaNueva2() {
        DefaultTableModel modeli = (DefaultTableModel) tabla_esptrabajo.getModel();
        modeli.setColumnCount(0);
        tabla_esptrabajo.setModel(modeli);

    }

    public void truncate() {

    }

    public void arbolLleno() {
        DefaultTreeModel modeloArbol = (DefaultTreeModel) jt_ArbolInicio.getModel();
        File p = new File(".");
        File[] x = p.listFiles();
        DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) modeloArbol.getRoot();
        for (File t : x) {
            if (t.getPath().contains(".txt")) {
                DefaultMutableTreeNode nodoFIle = new DefaultMutableTreeNode(t.getName());
                nodoRaiz.add(nodoFIle);
            }
        }
        modeloArbol.setRoot(nodoRaiz);

    }
    public String [] buscarAtributosTXT (String ntabla){
        String temp [] = null;
        
       File archivo = null;
                    FileReader fr = null;
                    BufferedReader br = null;
                    //HAY QUE BUSCAR LA TABLA ANTES DE LEER

                    DefaultTreeModel modeloArbol = (DefaultTreeModel) jtree_baseddatos.getModel();
                    DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) modeloArbol.getRoot();
                    for (int j = 0; j < nodoRaiz.getChildCount(); j++) {
                        DefaultMutableTreeNode hijo = (DefaultMutableTreeNode) nodoRaiz.getChildAt(j);
                        base_actual = (BasedeDatos)hijo.getUserObject();
                        System.out.println(base_actual);
                        if (hijo.getChildCount() > 0) {
                            for (int k = 0; k < hijo.getChildCount(); k++) {
                                DefaultMutableTreeNode hijoDelhijo = (DefaultMutableTreeNode) hijo.getChildAt(k);
                                File hijodelhijo_uso = (File) hijoDelhijo.getUserObject();
                                String pat = hijodelhijo_uso.getPath();
                                String[] paths = pat.split("\\\\");
                                
                                if (paths[2].equals(ntabla + ".txt")) {
                                    
                                    try {
                                        archivo = new File("./" + paths[1] + "/" + ntabla+".txt");
                                        fr = new FileReader(archivo);
                                        br = new BufferedReader(fr);
                                        String lin = "";
                                        br.readLine();
                                        br.readLine();
                                        br.readLine();
                                        br.readLine();

                                        String colum = br.readLine();
                                        String[] c = colum.split(" "); //atributos:  ||   b1,b2,b3   
                                        temp = c[1].split(","); //cam1 || cam2 || cam3 
                                   


                                        br.close();
                                        fr.close();
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        }
                    }

        return temp; 
    }

    public boolean validarRows(File archivo, Object[] campos) {

        try {
            FileReader fr = new FileReader(archivo);
            BufferedReader br = new BufferedReader(fr);
            for (int i = 0; i < 6; i++) {
                br.readLine();
            }
            String linea = br.readLine();
            Object[] rows = linea.split(",");
            for (int i = 0; i < campos.length; i++) {
                if (rows[i] instanceof Integer) {
                    if (!(campos[i] instanceof Integer)) {
                        return false;
                    }
                } else if (rows[i] instanceof String) {
                    if (!(campos[i] instanceof String)) {
                        return false;
                    }

                } else if (rows[i] instanceof Double) {
                    if (!(campos[i] instanceof Double)) {
                        return false;
                    }

                } else if (rows[i] instanceof Character) {
                    if (!(campos[i] instanceof Character)) {
                        return false;
                    }
                }
            }

        } catch (Exception e) {
        }
        return true;
    }

    public void expandir(JDialog x) {
        //jugar con el orden no falle
        x.pack();
        x.setLocationRelativeTo(this);
        x.setModal(true);
        x.setVisible(true);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_abrirpginicio;
    private javax.swing.JButton bt_clear;
    private javax.swing.JButton bt_crear;
    private javax.swing.JButton bt_crearuserBase;
    private javax.swing.JButton bt_cuentapginicio;
    private javax.swing.JButton bt_dibBase;
    private javax.swing.JButton bt_elimbase;
    private javax.swing.JButton bt_ingresar;
    private javax.swing.JButton bt_iniciopginicio;
    private javax.swing.JButton bt_newdatabase;
    private javax.swing.JButton bt_notengousuario;
    private javax.swing.JButton bt_nuevoBase;
    private javax.swing.JButton bt_nuevopginicio;
    private javax.swing.JButton bt_ok;
    private javax.swing.JButton bt_opcionespginicio;
    private javax.swing.JButton bt_send;
    private javax.swing.JCheckBox cb_create;
    private javax.swing.JCheckBox cb_delete1;
    private javax.swing.JCheckBox cb_drop;
    private javax.swing.JCheckBox cb_gestionUsuarios;
    private javax.swing.JCheckBox cb_insert;
    private javax.swing.JCheckBox cb_select;
    private javax.swing.JComboBox<String> comboSql;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JDialog jd_baseUsuarios;
    private javax.swing.JDialog jd_crearusuario;
    private javax.swing.JDialog jd_cuenta;
    private javax.swing.JDialog jd_error;
    private javax.swing.JDialog jd_espaciodetrabajo;
    private javax.swing.JDialog jd_inicio;
    private javax.swing.JLabel jl_abrir;
    private javax.swing.JLabel jl_bienvenido;
    private javax.swing.JLabel jl_contrase√±aCuenta;
    private javax.swing.JLabel jl_error;
    private javax.swing.JLabel jl_usuarioCuenta;
    private javax.swing.JMenuItem jmi_AgregarTabla;
    private javax.swing.JMenuItem jmi_AgregarUsuario;
    private javax.swing.JMenuItem jmi_cambiarUsuario;
    private javax.swing.JMenuItem jmi_diagramarBase;
    private javax.swing.JMenuItem jmi_eliminarBase;
    private javax.swing.JMenuItem jmi_eliminarbase;
    private javax.swing.JPanel jp_diagrama;
    private javax.swing.JTree jt_ArbolInicio;
    private javax.swing.JTree jtree_baseddatos;
    private javax.swing.JPasswordField pf_contra;
    private javax.swing.JPasswordField pf_contraUser;
    private javax.swing.JPasswordField pf_contracrearusuario;
    private javax.swing.JPopupMenu popup_opcionesBases;
    private javax.swing.JPopupMenu popup_tablasenarbol;
    private javax.swing.JTable tabla_esptrabajo;
    private javax.swing.JTextField tf_crearnombreusuario;
    private javax.swing.JTextField tf_usuarioBase;
    private javax.swing.JTextField tf_usuarioo;
    private javax.swing.JTextPane tp_sql;
    // End of variables declaration//GEN-END:variables

    protected StyledDocument doc;
    protected int espaciosApretados = 0;
    protected Style estilo;
    protected String ingresoUsuario;
    protected String ingresoContrase√±a;
    protected Usuario userActual;
    protected BasedeDatos base_seleccionada;
    protected BasedeDatos base_actual;
    
    protected DefaultMutableTreeNode nodo_seleccionado;
    protected File archivoActual;
    protected File scriptActual; 
    int cont = 0;
    protected String[] camposcreate;
    protected Object[] camposinsert;
    protected String[] col;
    protected String[] tipocampos;
    protected boolean sqlcorrecto = false;
    protected String atributosArchivo[];
    protected String linea1[];
    protected String campos[];
    protected String linea2[];
    protected String nombretab2 = "";
    protected String campoin[];
    protected int row;
    protected ArrayList <String> detalles1 = new ArrayList();
    protected ArrayList <String> detalles2 = new ArrayList();

}
